package cezeszamlazo;

import java.awt.Dimension;
import java.awt.Toolkit;
import java.awt.event.ActionEvent;
import java.awt.event.KeyEvent;
import java.awt.event.MouseEvent;
import java.text.SimpleDateFormat;
import java.util.Calendar;
import javax.swing.AbstractAction;
import javax.swing.ActionMap;
import javax.swing.InputMap;
import javax.swing.JComponent;
import javax.swing.JLabel;
import javax.swing.JTextField;
import javax.swing.KeyStroke;

/**
 * @author adam.papp
 */
public class CalendarDialog extends javax.swing.JDialog
{
    public static final int RET_CANCEL = 0, RET_OK = 1;
    
    private final String[] honapok = {"január", "február", "március", "április", "május", "június", "július", "augusztus", "szeptember", "október", "november", "december"};
    private final SimpleDateFormat format = new SimpleDateFormat("yyyy-MM-dd");
    private int year, month, day;
    private JTextField field = null;
    private JLabel label = null;

    public CalendarDialog(java.awt.Frame parent, JTextField field)
    {
	super(parent, true);
	initComponents();
	
	this.field = field;
	Calendar c = Calendar.getInstance();
        
	if (!field.getText().isEmpty())
        {
	    String[] date = field.getText().split("-", 3);
            
	    this.year = Integer.parseInt(date[0]);
	    this.month = Integer.parseInt(date[1]);
            month--;//mivel a hónapok indexelése 0-tól kezdődik
	    this.day = Integer.parseInt(date[2]);
	    
	    c.set(year, month, day); 
            
            System.err.println(year + " - " + month + " - " + day);
	}
        else
        {
	    year = c.get(Calendar.YEAR);
	    month = c.get(Calendar.MONTH);
            month++;//mivel a hónapok indexelése 0-tól kezdődik
            day = c.get(Calendar.DAY_OF_MONTH);
            
            System.err.println(year + " - " + month + " - " + day);
	}
        
	szamolNaptar(c);
	
	Toolkit toolkit = Toolkit.getDefaultToolkit();
	Dimension screenSize = toolkit.getScreenSize();
	int x = (screenSize.width - getWidth()) / 2;
	int y = (screenSize.height - getHeight()) / 2;
	
	java.net.URL url = ClassLoader.getSystemResource("cezeszamlazo/resources/calendar.png");
	java.awt.Image img = toolkit.createImage(url);
	setIconImage(img);
	
	setLocation(x, y);
	
	setTitle("Naptár");
	setVisible(true);

	// Close the dialog when Esc is pressed
	String cancelName = "cancel";
	InputMap inputMap = getRootPane().getInputMap(JComponent.WHEN_ANCESTOR_OF_FOCUSED_COMPONENT);
	inputMap.put(KeyStroke.getKeyStroke(KeyEvent.VK_ESCAPE, 0), cancelName);
	
        ActionMap actionMap = getRootPane().getActionMap();
	actionMap.put(cancelName, new AbstractAction()
        {
	    public void actionPerformed(ActionEvent e)
            {
		doClose(RET_CANCEL);
	    }
	});
    }
    
    public CalendarDialog(java.awt.Frame parent, JLabel label)
    {
	super(parent, true);
	initComponents();
	
	this.label = label;
	Calendar c = Calendar.getInstance();
        
	if (!label.getText().isEmpty())
        {
	    String[] date = label.getText().split("-", 3);
	    this.year = Integer.parseInt(date[0]);
	    this.month = Integer.parseInt(date[1]);
	    this.day = Integer.parseInt(date[2]);
	    month--;
	    c.set(year, month, day);
	}
        else
        {
	    year = c.get(Calendar.YEAR);
	    month = c.get(Calendar.MONTH);
            month++;
	}
        
	szamolNaptar(c);
	
	Toolkit toolkit = Toolkit.getDefaultToolkit();
	Dimension screenSize = toolkit.getScreenSize();
	int x = (screenSize.width - getWidth()) / 2;
	int y = (screenSize.height - getHeight()) / 2;
	
	java.net.URL url = ClassLoader.getSystemResource("cezeszamlazo/resources/calendar.png");
	java.awt.Image img = toolkit.createImage(url);
	setIconImage(img);
	
	setLocation(x, y);
	
	setTitle("Naptár");
	setVisible(true);

	// Close the dialog when Esc is pressed
	String cancelName = "cancel";
	InputMap inputMap = getRootPane().getInputMap(JComponent.WHEN_ANCESTOR_OF_FOCUSED_COMPONENT);
	inputMap.put(KeyStroke.getKeyStroke(KeyEvent.VK_ESCAPE, 0), cancelName);
        
	ActionMap actionMap = getRootPane().getActionMap();
	actionMap.put(cancelName, new AbstractAction()
        {
	    public void actionPerformed(ActionEvent e)
            {
		doClose(RET_CANCEL);
	    }
	});
    }

    /** @return the return status of this dialog - one of RET_OK or RET_CANCEL */
    public int getReturnStatus()
    {
	return returnStatus;
    }

    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        button_Previous = new javax.swing.JButton();
        calendarHeader = new javax.swing.JLabel();
        button_Next = new javax.swing.JButton();
        jScrollPane8 = new javax.swing.JScrollPane();
        calendarTabla = new javax.swing.JTable();

        setName("Form"); // NOI18N
        addWindowListener(new java.awt.event.WindowAdapter() {
            public void windowClosing(java.awt.event.WindowEvent evt) {
                closeDialog(evt);
            }
        });

        org.jdesktop.application.ResourceMap resourceMap = org.jdesktop.application.Application.getInstance(cezeszamlazo.App.class).getContext().getResourceMap(CalendarDialog.class);
        button_Previous.setIcon(resourceMap.getIcon("button_Previous.icon")); // NOI18N
        button_Previous.setText(resourceMap.getString("button_Previous.text")); // NOI18N
        button_Previous.setName("button_Previous"); // NOI18N
        button_Previous.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                button_PreviousActionPerformed(evt);
            }
        });

        calendarHeader.setFont(resourceMap.getFont("calendarHeader.font")); // NOI18N
        calendarHeader.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        calendarHeader.setText(resourceMap.getString("calendarHeader.text")); // NOI18N
        calendarHeader.setName("calendarHeader"); // NOI18N

        button_Next.setIcon(resourceMap.getIcon("button_Next.icon")); // NOI18N
        button_Next.setText(resourceMap.getString("button_Next.text")); // NOI18N
        button_Next.setName("button_Next"); // NOI18N
        button_Next.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                button_NextActionPerformed(evt);
            }
        });

        jScrollPane8.setName("jScrollPane8"); // NOI18N

        calendarTabla.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null}
            },
            new String [] {
                "H", "K", "Sz", "Cs", "P", "Sz", "V"
            }
        ) {
            boolean[] canEdit = new boolean [] {
                false, false, false, false, false, false, false
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        calendarTabla.setColumnSelectionAllowed(true);
        calendarTabla.setName("calendarTabla"); // NOI18N
        calendarTabla.setSelectionMode(javax.swing.ListSelectionModel.SINGLE_SELECTION);
        calendarTabla.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                calendarTablaMouseClicked(evt);
            }
        });
        jScrollPane8.setViewportView(calendarTabla);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jScrollPane8, javax.swing.GroupLayout.PREFERRED_SIZE, 0, Short.MAX_VALUE)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(button_Previous, javax.swing.GroupLayout.PREFERRED_SIZE, 42, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(calendarHeader, javax.swing.GroupLayout.DEFAULT_SIZE, 136, Short.MAX_VALUE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(button_Next, javax.swing.GroupLayout.PREFERRED_SIZE, 42, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(calendarHeader, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, 29, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                        .addComponent(button_Previous)
                        .addComponent(button_Next)))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jScrollPane8, javax.swing.GroupLayout.DEFAULT_SIZE, 123, Short.MAX_VALUE)
                .addContainerGap())
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents
    
    /** Closes the dialog */
    private void closeDialog(java.awt.event.WindowEvent evt) {//GEN-FIRST:event_closeDialog
	doClose(RET_CANCEL);
    }//GEN-LAST:event_closeDialog

private void calendarTablaMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_calendarTablaMouseClicked
	int row = calendarTabla.getSelectedRow();
	int col = calendarTabla.getSelectedColumn();
        
	if (row >= 0 && col >= 0 && evt.getClickCount() == 2 && evt.getButton() == MouseEvent.BUTTON1)
        {
	    String d = String.valueOf(calendarTabla.getValueAt(row, col));
            
	    try
            {
		Calendar c = Calendar.getInstance();
		day = Integer.parseInt(d);
		c.set(year, month, day);
                
                if(field == null)
                {
                    label.setText(format.format(c.getTime()));
                }
                else
                {
                    field.setText(format.format(c.getTime()));
                }
                
                System.out.println("Kiválasztott nap: " + format.format(c.getTime()) + " (CalendarDialog.java/calendarTableMouseClicked())");
		setVisible(false);
	    }
            catch (NumberFormatException ex)
            {
		System.out.println("NumberFormatException váltódott ki!");
		ex.printStackTrace();
	    }
	}
}//GEN-LAST:event_calendarTablaMouseClicked

    private void button_PreviousActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_button_PreviousActionPerformed
        month--;
        
	if (month < 0)
        {
	    month = 11;
	    year = year - 1;
	}
        
        System.out.println("month:" + month + " CalendarDialog.java/jpanel1MouseClicked()");
	Calendar c = Calendar.getInstance();
	c.set(year, month, day);
        
	szamolNaptar(c);
    }//GEN-LAST:event_button_PreviousActionPerformed

    private void button_NextActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_button_NextActionPerformed
        month++;
        
	if (month >= 12)
        {
	    month = 0;
	    year = year + 1;
	}
        
        System.out.println("month:" + month + " CalendarDialog.java/jpanel2MouseClicked()");
	Calendar c = Calendar.getInstance();
	c.set(year, month, day);
	szamolNaptar(c);
    }//GEN-LAST:event_button_NextActionPerformed
    
    private void doClose(int retStatus)
    {
	returnStatus = retStatus;
	setVisible(false);
	dispose();
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton button_Next;
    private javax.swing.JButton button_Previous;
    private javax.swing.JLabel calendarHeader;
    private javax.swing.JTable calendarTabla;
    private javax.swing.JScrollPane jScrollPane8;
    // End of variables declaration//GEN-END:variables
    private int returnStatus = RET_CANCEL;
    
    private void szamolNaptar(Calendar c)
    {
        calendarHeader.setText(year + ". " + honapok[month]);
	//calendarHeader.setText(c.get(Calendar.YEAR) + ". " + honapok[c.get(Calendar.MONTH)]);
	Calendar temp = c;
	temp.set(Calendar.DATE, 1);
	int elso = temp.get(Calendar.DAY_OF_WEEK); //azt adja vissza, hogy hanyadik nap a héten, az aktuális nap
	
        if (elso == 1)
        {
	    elso = 6;
	}
        else
        {
	    elso -= 2;
	}
        
	int osszes = temp.getActualMaximum(Calendar.DAY_OF_MONTH); //az adott hónap összes napját adja vissza
	
        for (int i = 0; i < 6; i++)
        {
	    for (int j = 0; j < 7; j++)
            {
		calendarTabla.setValueAt("", i, j);
	    }
	}
        
	for (int i = 1; i <= osszes; i++)
        {
	    int row = (i + elso - 1) / 7;
	    calendarTabla.setValueAt(i, row, (i + elso - 1) % 7);
	}
        
	CalendarTableRender render = new CalendarTableRender();
        
	for (int i = 0; i < calendarTabla.getColumnCount(); i++)
        {
	    calendarTabla.getColumnModel().getColumn(i).setCellRenderer(render);
	}
    }
}