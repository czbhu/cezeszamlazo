package cezeszamlazo;

import cezeszamlazo.controller.Functions;
import java.awt.Color;
import cezeszamlazo.controller.Szamla;
import cezeszamlazo.controller.Functions;
import cezeszamlazo.database.Query;
import cezeszamlazo.hu.gov.nav.onlineszamla.GenerateInvoiceXMLs;
import cezeszamlazo.hu.gov.nav.onlineszamla.GenerateXml;
import cezeszamlazo.kintlevoseg.KintlevosegLevel;
import cezeszamlazo.kintlevoseg.KintlevosegLevelAttributum;
import cezeszamlazo.kintlevoseg.KintlevosegLevelException;
import cezeszamlazo.kintlevoseg.KintlevosegLevelKapcsolattarto;
import cezeszamlazo.kintlevoseg.KintlevosegKapcsolattartokGroup;
import java.awt.Component;
import java.awt.Dimension;
import java.awt.Point;
import java.awt.Toolkit;
import java.awt.event.AdjustmentEvent;
import java.awt.event.AdjustmentListener;
import java.awt.event.ItemEvent;
import java.awt.event.MouseEvent;
import java.io.ByteArrayInputStream;
import java.io.DataOutputStream;
import java.io.File;
import java.io.FileOutputStream;
import java.io.IOException;
import java.io.InputStream;
import java.io.OutputStream;
import java.io.RandomAccessFile;
import java.nio.charset.Charset;
import java.nio.charset.StandardCharsets;
import java.text.DateFormat;
import java.text.SimpleDateFormat;
import java.time.LocalDate;
import java.time.format.DateTimeFormatter;
import java.util.ArrayList;
import java.util.Date;
import java.util.Iterator;
import java.util.List;
import java.util.Map;
import java.util.TimeZone;
import java.util.TreeMap;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.JDialog;
import javax.swing.JFileChooser;
import javax.swing.JFrame;
import javax.swing.JScrollPane;
import javax.swing.JTable;
import javax.swing.JTextField;
import javax.swing.table.DefaultTableModel;
import javax.swing.table.TableColumn;

public class SzamlakFrame extends javax.swing.JFrame
{
    public enum SzamlaType
    {
        UJ, MASOLAT, STORNO, HELYESBITO, DEVIZA, MODOSIT
    }
    
    private String keres = "1";
    private boolean b = true;
    private String nyomtatasAzon = "";
    private FolyamatbanDialog folyamatbanDialog;
    private TimeStamp TimeStamp = new TimeStamp();
    private boolean firstInitEasyCombobox = false;   
    private SzamlaType szamlaType;
    private String [] billingSoftwareDatas = new String[10];
    private String [] SupplierDatas = new String[5];

    
    /**
     * Creates new form SzamlakFrame
     */
    public SzamlakFrame()
    {
        initComponents();
        init();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        szamlaPopupMenu = new javax.swing.JPopupMenu();
        masolatMenuItem = new javax.swing.JMenuItem();
        jSeparator1 = new javax.swing.JPopupMenu.Separator();
        modositoMenuItem = new javax.swing.JMenuItem();
        helyesbitoMenuItem = new javax.swing.JMenuItem();
        stornoMenuItem = new javax.swing.JMenuItem();
        jSeparator2 = new javax.swing.JPopupMenu.Separator();
        reSendMenuItem = new javax.swing.JMenuItem();
        statusRefreshMenuItem = new javax.swing.JMenuItem();
        kifizetesMenuItem = new javax.swing.JMenuItem();
        nyomtatasMenuItem = new javax.swing.JMenuItem();
        jSeparator3 = new javax.swing.JPopupMenu.Separator();
        pdfKeszitesMenuItem = new javax.swing.JMenuItem();
        csvKeszitesEgyszeruMenuItem = new javax.swing.JMenuItem();
        csvKeszitesReszletesMenuItem = new javax.swing.JMenuItem();
        kijeloltekTermekdijKimutatas = new javax.swing.JMenuItem();
        jSeparator4 = new javax.swing.JPopupMenu.Separator();
        kintlevosegLevelEmailMenuItem = new javax.swing.JMenuItem();
        kintlevosegLevelPDFMenuItem = new javax.swing.JMenuItem();
        teljesitesIgazolasNyomtatasaMenuItem = new javax.swing.JMenuItem();
        nyomtatasDialog = new javax.swing.JDialog();
        nyomtatasLabel = new javax.swing.JLabel();
        nyomtatasPeldany = new javax.swing.JTextField();
        jLabel3 = new javax.swing.JLabel();
        jPanel2 = new javax.swing.JPanel();
        jLabel4 = new javax.swing.JLabel();
        jPanel3 = new javax.swing.JPanel();
        jLabel5 = new javax.swing.JLabel();
        jPanel4 = new javax.swing.JPanel();
        jLabel6 = new javax.swing.JLabel();
        reszletesKeresesDialog = new javax.swing.JDialog();
        jPanel5 = new javax.swing.JPanel();
        kintlevosegCheckBoxInAdvancedSearch = new javax.swing.JCheckBox();
        normal = new javax.swing.JCheckBox();
        helyesbito = new javax.swing.JCheckBox();
        helyesbitett = new javax.swing.JCheckBox();
        jPanel7 = new javax.swing.JPanel();
        keltTol = new javax.swing.JTextField();
        keltTolCal = new javax.swing.JLabel();
        jLabel7 = new javax.swing.JLabel();
        keltIg = new javax.swing.JTextField();
        keltIgCal = new javax.swing.JLabel();
        jLabel9 = new javax.swing.JLabel();
        jPanel8 = new javax.swing.JPanel();
        jLabel10 = new javax.swing.JLabel();
        teljesitesIgCal = new javax.swing.JLabel();
        teljesitesIg = new javax.swing.JTextField();
        jLabel12 = new javax.swing.JLabel();
        teljesitesTolCal = new javax.swing.JLabel();
        teljesitesTol = new javax.swing.JTextField();
        jPanel9 = new javax.swing.JPanel();
        jLabel14 = new javax.swing.JLabel();
        esedekessegIgCal = new javax.swing.JLabel();
        esedekessegIg = new javax.swing.JTextField();
        jLabel16 = new javax.swing.JLabel();
        esedekessegTolCal = new javax.swing.JLabel();
        esedekessegTol = new javax.swing.JTextField();
        jPanel10 = new javax.swing.JPanel();
        jLabel18 = new javax.swing.JLabel();
        kifizetesIgCal = new javax.swing.JLabel();
        kifizetesIg = new javax.swing.JTextField();
        jLabel20 = new javax.swing.JLabel();
        kifizetesTolCal = new javax.swing.JLabel();
        kifizetesTol = new javax.swing.JTextField();
        DetailedSearchButton = new javax.swing.JButton();
        DetailedSearchToDefaultButton = new javax.swing.JButton();
        jPanel11 = new javax.swing.JPanel();
        keszpenzCheckBox = new javax.swing.JCheckBox();
        atutalasCheckBox = new javax.swing.JCheckBox();
        utanvetCheckBox = new javax.swing.JCheckBox();
        sorszamozas = new javax.swing.JComboBox();
        kereses = new javax.swing.JTextField();
        szamlaScrollPane = new javax.swing.JScrollPane();
        szamlakTable = new javax.swing.JTable();
        sumScrollPane = new javax.swing.JScrollPane();
        sumTable = new javax.swing.JTable();
        nemNyomtatottCheckBox = new javax.swing.JCheckBox();
        jPanel1 = new javax.swing.JPanel();
        ReszletesKereses = new javax.swing.JLabel();
        EasySearchComboBox = new javax.swing.JComboBox();

        szamlaPopupMenu.setName("szamlaPopupMenu"); // NOI18N

        org.jdesktop.application.ResourceMap resourceMap = org.jdesktop.application.Application.getInstance(cezeszamlazo.App.class).getContext().getResourceMap(SzamlakFrame.class);
        masolatMenuItem.setText(resourceMap.getString("masolatMenuItem.text")); // NOI18N
        masolatMenuItem.setName("masolatMenuItem"); // NOI18N
        masolatMenuItem.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                masolatMenuItemActionPerformed(evt);
            }
        });
        szamlaPopupMenu.add(masolatMenuItem);

        jSeparator1.setName("jSeparator1"); // NOI18N
        szamlaPopupMenu.add(jSeparator1);

        modositoMenuItem.setText(resourceMap.getString("modositoMenuItem.text")); // NOI18N
        modositoMenuItem.setName("modositoMenuItem"); // NOI18N
        modositoMenuItem.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                modositoMenuItemActionPerformed(evt);
            }
        });
        szamlaPopupMenu.add(modositoMenuItem);

        helyesbitoMenuItem.setText(resourceMap.getString("helyesbitoMenuItem.text")); // NOI18N
        helyesbitoMenuItem.setName("helyesbitoMenuItem"); // NOI18N
        helyesbitoMenuItem.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                helyesbitoMenuItemActionPerformed(evt);
            }
        });
        szamlaPopupMenu.add(helyesbitoMenuItem);

        stornoMenuItem.setText(resourceMap.getString("stornoMenuItem.text")); // NOI18N
        stornoMenuItem.setName("stornoMenuItem"); // NOI18N
        stornoMenuItem.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                stornoMenuItemActionPerformed(evt);
            }
        });
        szamlaPopupMenu.add(stornoMenuItem);

        jSeparator2.setName("jSeparator2"); // NOI18N
        szamlaPopupMenu.add(jSeparator2);

        reSendMenuItem.setText(resourceMap.getString("reSendMenuItem.text")); // NOI18N
        reSendMenuItem.setName("reSendMenuItem"); // NOI18N
        reSendMenuItem.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                reSendMenuItemActionPerformed(evt);
            }
        });
        szamlaPopupMenu.add(reSendMenuItem);

        statusRefreshMenuItem.setText(resourceMap.getString("statusRefreshMenuItem.text")); // NOI18N
        statusRefreshMenuItem.setName("statusRefreshMenuItem"); // NOI18N
        statusRefreshMenuItem.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                statusRefreshMenuItemActionPerformed(evt);
            }
        });
        szamlaPopupMenu.add(statusRefreshMenuItem);

        kifizetesMenuItem.setText(resourceMap.getString("kifizetesMenuItem.text")); // NOI18N
        kifizetesMenuItem.setName("kifizetesMenuItem"); // NOI18N
        kifizetesMenuItem.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                kifizetesMenuItemActionPerformed(evt);
            }
        });
        szamlaPopupMenu.add(kifizetesMenuItem);

        nyomtatasMenuItem.setText(resourceMap.getString("nyomtatasMenuItem.text")); // NOI18N
        nyomtatasMenuItem.setName("nyomtatasMenuItem"); // NOI18N
        nyomtatasMenuItem.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                nyomtatasMenuItemActionPerformed(evt);
            }
        });
        szamlaPopupMenu.add(nyomtatasMenuItem);

        jSeparator3.setName("jSeparator3"); // NOI18N
        szamlaPopupMenu.add(jSeparator3);

        pdfKeszitesMenuItem.setText(resourceMap.getString("pdfKeszitesMenuItem.text")); // NOI18N
        pdfKeszitesMenuItem.setName("pdfKeszitesMenuItem"); // NOI18N
        pdfKeszitesMenuItem.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                pdfKeszitesMenuItemActionPerformed(evt);
            }
        });
        szamlaPopupMenu.add(pdfKeszitesMenuItem);

        csvKeszitesEgyszeruMenuItem.setText(resourceMap.getString("csvKeszitesEgyszeruMenuItem.text")); // NOI18N
        csvKeszitesEgyszeruMenuItem.setName("csvKeszitesEgyszeruMenuItem"); // NOI18N
        csvKeszitesEgyszeruMenuItem.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                csvKeszitesEgyszeruMenuItemActionPerformed(evt);
            }
        });
        szamlaPopupMenu.add(csvKeszitesEgyszeruMenuItem);

        csvKeszitesReszletesMenuItem.setText(resourceMap.getString("csvKeszitesReszletesMenuItem.text")); // NOI18N
        csvKeszitesReszletesMenuItem.setName("csvKeszitesReszletesMenuItem"); // NOI18N
        csvKeszitesReszletesMenuItem.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                csvKeszitesReszletesMenuItemActionPerformed(evt);
            }
        });
        szamlaPopupMenu.add(csvKeszitesReszletesMenuItem);

        kijeloltekTermekdijKimutatas.setText(resourceMap.getString("kijeloltekTermekdijKimutatas.text")); // NOI18N
        kijeloltekTermekdijKimutatas.setName("kijeloltekTermekdijKimutatas"); // NOI18N
        kijeloltekTermekdijKimutatas.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                kijeloltekTermekdijKimutatasActionPerformed(evt);
            }
        });
        szamlaPopupMenu.add(kijeloltekTermekdijKimutatas);

        jSeparator4.setName("jSeparator4"); // NOI18N
        szamlaPopupMenu.add(jSeparator4);

        kintlevosegLevelEmailMenuItem.setText(resourceMap.getString("kintlevosegLevelEmailMenuItem.text")); // NOI18N
        kintlevosegLevelEmailMenuItem.setName("kintlevosegLevelEmailMenuItem"); // NOI18N
        kintlevosegLevelEmailMenuItem.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                kintlevosegLevelEmailMenuItemActionPerformed(evt);
            }
        });
        szamlaPopupMenu.add(kintlevosegLevelEmailMenuItem);

        kintlevosegLevelPDFMenuItem.setText(resourceMap.getString("kintlevosegLevelPDFMenuItem.text")); // NOI18N
        kintlevosegLevelPDFMenuItem.setName("kintlevosegLevelPDFMenuItem"); // NOI18N
        kintlevosegLevelPDFMenuItem.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                kintlevosegLevelPDFMenuItemActionPerformed(evt);
            }
        });
        szamlaPopupMenu.add(kintlevosegLevelPDFMenuItem);

        teljesitesIgazolasNyomtatasaMenuItem.setText(resourceMap.getString("teljesitesIgazolasNyomtatasaMenuItem.text")); // NOI18N
        teljesitesIgazolasNyomtatasaMenuItem.setName("teljesitesIgazolasNyomtatasaMenuItem"); // NOI18N
        teljesitesIgazolasNyomtatasaMenuItem.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                teljesitesIgazolasNyomtatasaMenuItemActionPerformed(evt);
            }
        });
        szamlaPopupMenu.add(teljesitesIgazolasNyomtatasaMenuItem);

        nyomtatasDialog.setModal(true);
        nyomtatasDialog.setName("nyomtatasDialog"); // NOI18N

        nyomtatasLabel.setFont(resourceMap.getFont("nyomtatasLabel.font")); // NOI18N
        nyomtatasLabel.setText(resourceMap.getString("nyomtatasLabel.text")); // NOI18N
        nyomtatasLabel.setName("nyomtatasLabel"); // NOI18N

        nyomtatasPeldany.setHorizontalAlignment(javax.swing.JTextField.RIGHT);
        nyomtatasPeldany.setText(resourceMap.getString("nyomtatasPeldany.text")); // NOI18N
        nyomtatasPeldany.setName("nyomtatasPeldany"); // NOI18N

        jLabel3.setFont(resourceMap.getFont("jLabel3.font")); // NOI18N
        jLabel3.setText(resourceMap.getString("jLabel3.text")); // NOI18N
        jLabel3.setName("jLabel3"); // NOI18N

        jPanel2.setBorder(javax.swing.BorderFactory.createLineBorder(resourceMap.getColor("jPanel2.border.lineColor"))); // NOI18N
        jPanel2.setToolTipText(resourceMap.getString("jPanel2.toolTipText")); // NOI18N
        jPanel2.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        jPanel2.setName("jPanel2"); // NOI18N
        jPanel2.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                jPanel2MouseClicked(evt);
            }
            public void mouseEntered(java.awt.event.MouseEvent evt) {
                jPanel2MouseEntered(evt);
            }
            public void mouseExited(java.awt.event.MouseEvent evt) {
                jPanel2MouseExited(evt);
            }
        });

        jLabel4.setIcon(resourceMap.getIcon("jLabel4.icon")); // NOI18N
        jLabel4.setText(resourceMap.getString("jLabel4.text")); // NOI18N
        jLabel4.setName("jLabel4"); // NOI18N

        javax.swing.GroupLayout jPanel2Layout = new javax.swing.GroupLayout(jPanel2);
        jPanel2.setLayout(jPanel2Layout);
        jPanel2Layout.setHorizontalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jLabel4)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        jPanel2Layout.setVerticalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jLabel4, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, 31, Short.MAX_VALUE)
        );

        jPanel3.setBorder(javax.swing.BorderFactory.createLineBorder(resourceMap.getColor("jPanel3.border.lineColor"))); // NOI18N
        jPanel3.setToolTipText(resourceMap.getString("jPanel3.toolTipText")); // NOI18N
        jPanel3.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        jPanel3.setName("jPanel3"); // NOI18N
        jPanel3.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                jPanel3MouseClicked(evt);
            }
            public void mouseEntered(java.awt.event.MouseEvent evt) {
                jPanel3MouseEntered(evt);
            }
            public void mouseExited(java.awt.event.MouseEvent evt) {
                jPanel3MouseExited(evt);
            }
        });

        jLabel5.setIcon(resourceMap.getIcon("jLabel5.icon")); // NOI18N
        jLabel5.setText(resourceMap.getString("jLabel5.text")); // NOI18N
        jLabel5.setName("jLabel5"); // NOI18N

        javax.swing.GroupLayout jPanel3Layout = new javax.swing.GroupLayout(jPanel3);
        jPanel3.setLayout(jPanel3Layout);
        jPanel3Layout.setHorizontalGroup(
            jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel3Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jLabel5)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        jPanel3Layout.setVerticalGroup(
            jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jLabel5, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, 31, Short.MAX_VALUE)
        );

        jPanel4.setBorder(javax.swing.BorderFactory.createLineBorder(resourceMap.getColor("jPanel4.border.lineColor"))); // NOI18N
        jPanel4.setToolTipText(resourceMap.getString("jPanel4.toolTipText")); // NOI18N
        jPanel4.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        jPanel4.setName("jPanel4"); // NOI18N
        jPanel4.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                jPanel4MouseClicked(evt);
            }
            public void mouseEntered(java.awt.event.MouseEvent evt) {
                jPanel4MouseEntered(evt);
            }
            public void mouseExited(java.awt.event.MouseEvent evt) {
                jPanel4MouseExited(evt);
            }
        });

        jLabel6.setIcon(resourceMap.getIcon("jLabel6.icon")); // NOI18N
        jLabel6.setText(resourceMap.getString("jLabel6.text")); // NOI18N
        jLabel6.setName("jLabel6"); // NOI18N

        javax.swing.GroupLayout jPanel4Layout = new javax.swing.GroupLayout(jPanel4);
        jPanel4.setLayout(jPanel4Layout);
        jPanel4Layout.setHorizontalGroup(
            jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel4Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jLabel6)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        jPanel4Layout.setVerticalGroup(
            jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jLabel6, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, 31, Short.MAX_VALUE)
        );

        javax.swing.GroupLayout nyomtatasDialogLayout = new javax.swing.GroupLayout(nyomtatasDialog.getContentPane());
        nyomtatasDialog.getContentPane().setLayout(nyomtatasDialogLayout);
        nyomtatasDialogLayout.setHorizontalGroup(
            nyomtatasDialogLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(nyomtatasDialogLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(nyomtatasDialogLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(nyomtatasDialogLayout.createSequentialGroup()
                        .addComponent(nyomtatasLabel)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(nyomtatasPeldany, javax.swing.GroupLayout.PREFERRED_SIZE, 30, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jLabel3))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, nyomtatasDialogLayout.createSequentialGroup()
                        .addComponent(jPanel2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 252, Short.MAX_VALUE)
                        .addComponent(jPanel3, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jPanel4, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addContainerGap())
        );
        nyomtatasDialogLayout.setVerticalGroup(
            nyomtatasDialogLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(nyomtatasDialogLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(nyomtatasDialogLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(nyomtatasLabel)
                    .addComponent(nyomtatasPeldany, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel3))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(nyomtatasDialogLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(jPanel3, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jPanel4, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jPanel2, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        reszletesKeresesDialog.setName("reszletesKeresesDialog"); // NOI18N

        jPanel5.setBorder(javax.swing.BorderFactory.createTitledBorder(javax.swing.BorderFactory.createLineBorder(resourceMap.getColor("jPanel5.border.border.lineColor")), resourceMap.getString("jPanel5.border.title"), javax.swing.border.TitledBorder.DEFAULT_JUSTIFICATION, javax.swing.border.TitledBorder.DEFAULT_POSITION, resourceMap.getFont("jPanel5.border.titleFont"))); // NOI18N
        jPanel5.setName("jPanel5"); // NOI18N
        jPanel5.setPreferredSize(new java.awt.Dimension(575, 146));

        kintlevosegCheckBoxInAdvancedSearch.setSelected(true);
        kintlevosegCheckBoxInAdvancedSearch.setText(resourceMap.getString("kintlevosegCheckBoxInAdvancedSearch.text")); // NOI18N
        kintlevosegCheckBoxInAdvancedSearch.setName("kintlevosegCheckBoxInAdvancedSearch"); // NOI18N
        kintlevosegCheckBoxInAdvancedSearch.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                kintlevosegCheckBoxInAdvancedSearchActionPerformed(evt);
            }
        });

        normal.setSelected(true);
        normal.setText(resourceMap.getString("normal.text")); // NOI18N
        normal.setName("normal"); // NOI18N

        helyesbito.setSelected(true);
        helyesbito.setText(resourceMap.getString("helyesbito.text")); // NOI18N
        helyesbito.setName("helyesbito"); // NOI18N

        helyesbitett.setSelected(true);
        helyesbitett.setText(resourceMap.getString("helyesbitett.text")); // NOI18N
        helyesbitett.setName("helyesbitett"); // NOI18N

        javax.swing.GroupLayout jPanel5Layout = new javax.swing.GroupLayout(jPanel5);
        jPanel5.setLayout(jPanel5Layout);
        jPanel5Layout.setHorizontalGroup(
            jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel5Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(kintlevosegCheckBoxInAdvancedSearch)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(normal)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(helyesbito)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(helyesbitett)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        jPanel5Layout.setVerticalGroup(
            jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel5Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(kintlevosegCheckBoxInAdvancedSearch)
                    .addComponent(normal)
                    .addComponent(helyesbito)
                    .addComponent(helyesbitett))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        jPanel7.setBorder(javax.swing.BorderFactory.createTitledBorder(javax.swing.BorderFactory.createLineBorder(resourceMap.getColor("jPanel7.border.border.lineColor")), resourceMap.getString("jPanel7.border.title"), javax.swing.border.TitledBorder.DEFAULT_JUSTIFICATION, javax.swing.border.TitledBorder.DEFAULT_POSITION, resourceMap.getFont("jPanel7.border.titleFont"))); // NOI18N
        jPanel7.setName("jPanel7"); // NOI18N
        jPanel7.setPreferredSize(new java.awt.Dimension(575, 146));

        keltTol.setEditable(false);
        keltTol.setBackground(resourceMap.getColor("keltTol.background")); // NOI18N
        keltTol.setHorizontalAlignment(javax.swing.JTextField.CENTER);
        keltTol.setText(resourceMap.getString("keltTol.text")); // NOI18N
        keltTol.setDisabledTextColor(resourceMap.getColor("keltTol.disabledTextColor")); // NOI18N
        keltTol.setName("keltTol"); // NOI18N

        keltTolCal.setIcon(resourceMap.getIcon("keltTolCal.icon")); // NOI18N
        keltTolCal.setText(resourceMap.getString("keltTolCal.text")); // NOI18N
        keltTolCal.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        keltTolCal.setName("keltTolCal"); // NOI18N
        keltTolCal.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                keltTolCalMouseClicked(evt);
            }
        });

        jLabel7.setText(resourceMap.getString("jLabel7.text")); // NOI18N
        jLabel7.setName("jLabel7"); // NOI18N

        keltIg.setEditable(false);
        keltIg.setBackground(resourceMap.getColor("keltIg.background")); // NOI18N
        keltIg.setHorizontalAlignment(javax.swing.JTextField.CENTER);
        keltIg.setText(resourceMap.getString("keltIg.text")); // NOI18N
        keltIg.setDisabledTextColor(resourceMap.getColor("keltIg.disabledTextColor")); // NOI18N
        keltIg.setName("keltIg"); // NOI18N

        keltIgCal.setIcon(resourceMap.getIcon("keltIgCal.icon")); // NOI18N
        keltIgCal.setText(resourceMap.getString("keltIgCal.text")); // NOI18N
        keltIgCal.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        keltIgCal.setName("keltIgCal"); // NOI18N
        keltIgCal.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                keltIgCalMouseClicked(evt);
            }
        });

        jLabel9.setText(resourceMap.getString("jLabel9.text")); // NOI18N
        jLabel9.setName("jLabel9"); // NOI18N

        javax.swing.GroupLayout jPanel7Layout = new javax.swing.GroupLayout(jPanel7);
        jPanel7.setLayout(jPanel7Layout);
        jPanel7Layout.setHorizontalGroup(
            jPanel7Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel7Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(keltTol, javax.swing.GroupLayout.PREFERRED_SIZE, 68, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(keltTolCal)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jLabel7)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(keltIg, javax.swing.GroupLayout.PREFERRED_SIZE, 68, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(keltIgCal)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jLabel9)
                .addContainerGap(121, Short.MAX_VALUE))
        );
        jPanel7Layout.setVerticalGroup(
            jPanel7Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel7Layout.createSequentialGroup()
                .addGroup(jPanel7Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(jLabel9, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addGroup(javax.swing.GroupLayout.Alignment.LEADING, jPanel7Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                        .addComponent(keltIg, javax.swing.GroupLayout.Alignment.LEADING)
                        .addComponent(keltIgCal, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(keltTol, javax.swing.GroupLayout.Alignment.LEADING)
                        .addComponent(keltTolCal, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(jLabel7)))
                .addContainerGap())
        );

        jPanel8.setBorder(javax.swing.BorderFactory.createTitledBorder(javax.swing.BorderFactory.createLineBorder(resourceMap.getColor("jPanel8.border.border.lineColor")), resourceMap.getString("jPanel8.border.title"), javax.swing.border.TitledBorder.DEFAULT_JUSTIFICATION, javax.swing.border.TitledBorder.DEFAULT_POSITION, resourceMap.getFont("jPanel8.border.titleFont"))); // NOI18N
        jPanel8.setName("jPanel8"); // NOI18N
        jPanel8.setPreferredSize(new java.awt.Dimension(575, 146));

        jLabel10.setText(resourceMap.getString("jLabel10.text")); // NOI18N
        jLabel10.setName("jLabel10"); // NOI18N

        teljesitesIgCal.setIcon(resourceMap.getIcon("teljesitesIgCal.icon")); // NOI18N
        teljesitesIgCal.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        teljesitesIgCal.setName("teljesitesIgCal"); // NOI18N
        teljesitesIgCal.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                teljesitesIgCalMouseClicked(evt);
            }
        });

        teljesitesIg.setEditable(false);
        teljesitesIg.setBackground(resourceMap.getColor("teljesitesIg.background")); // NOI18N
        teljesitesIg.setHorizontalAlignment(javax.swing.JTextField.CENTER);
        teljesitesIg.setText(resourceMap.getString("teljesitesIg.text")); // NOI18N
        teljesitesIg.setDisabledTextColor(resourceMap.getColor("teljesitesIg.disabledTextColor")); // NOI18N
        teljesitesIg.setName("teljesitesIg"); // NOI18N

        jLabel12.setText(resourceMap.getString("jLabel12.text")); // NOI18N
        jLabel12.setName("jLabel12"); // NOI18N

        teljesitesTolCal.setIcon(resourceMap.getIcon("teljesitesTolCal.icon")); // NOI18N
        teljesitesTolCal.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        teljesitesTolCal.setName("teljesitesTolCal"); // NOI18N
        teljesitesTolCal.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                teljesitesTolCalMouseClicked(evt);
            }
        });

        teljesitesTol.setEditable(false);
        teljesitesTol.setBackground(resourceMap.getColor("teljesitesTol.background")); // NOI18N
        teljesitesTol.setHorizontalAlignment(javax.swing.JTextField.CENTER);
        teljesitesTol.setText(resourceMap.getString("teljesitesTol.text")); // NOI18N
        teljesitesTol.setDisabledTextColor(resourceMap.getColor("teljesitesTol.disabledTextColor")); // NOI18N
        teljesitesTol.setEnabled(true);
        teljesitesTol.setName("teljesitesTol"); // NOI18N
        teljesitesTol.setSelectedTextColor(resourceMap.getColor("teljesitesTol.selectedTextColor")); // NOI18N

        javax.swing.GroupLayout jPanel8Layout = new javax.swing.GroupLayout(jPanel8);
        jPanel8.setLayout(jPanel8Layout);
        jPanel8Layout.setHorizontalGroup(
            jPanel8Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel8Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(teljesitesTol, javax.swing.GroupLayout.PREFERRED_SIZE, 68, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(teljesitesTolCal)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jLabel12)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(teljesitesIg, javax.swing.GroupLayout.PREFERRED_SIZE, 68, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(teljesitesIgCal)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jLabel10)
                .addContainerGap(117, Short.MAX_VALUE))
        );
        jPanel8Layout.setVerticalGroup(
            jPanel8Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel8Layout.createSequentialGroup()
                .addGroup(jPanel8Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(jLabel10, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addGroup(javax.swing.GroupLayout.Alignment.LEADING, jPanel8Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                        .addComponent(teljesitesIg, javax.swing.GroupLayout.Alignment.LEADING)
                        .addComponent(teljesitesIgCal, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(teljesitesTol, javax.swing.GroupLayout.Alignment.LEADING)
                        .addComponent(teljesitesTolCal, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.PREFERRED_SIZE, 20, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addComponent(jLabel12)))
                .addContainerGap())
        );

        jPanel9.setBorder(javax.swing.BorderFactory.createTitledBorder(javax.swing.BorderFactory.createLineBorder(resourceMap.getColor("jPanel9.border.border.lineColor")), resourceMap.getString("jPanel9.border.title"), javax.swing.border.TitledBorder.DEFAULT_JUSTIFICATION, javax.swing.border.TitledBorder.DEFAULT_POSITION, resourceMap.getFont("jPanel9.border.titleFont"))); // NOI18N
        jPanel9.setName("jPanel9"); // NOI18N
        jPanel9.setPreferredSize(new java.awt.Dimension(575, 146));

        jLabel14.setText(resourceMap.getString("jLabel14.text")); // NOI18N
        jLabel14.setName("jLabel14"); // NOI18N

        esedekessegIgCal.setIcon(resourceMap.getIcon("esedekessegIgCal.icon")); // NOI18N
        esedekessegIgCal.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        esedekessegIgCal.setName("esedekessegIgCal"); // NOI18N
        esedekessegIgCal.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                esedekessegIgCalMouseClicked(evt);
            }
        });

        esedekessegIg.setEditable(false);
        esedekessegIg.setBackground(resourceMap.getColor("esedekessegIg.background")); // NOI18N
        esedekessegIg.setHorizontalAlignment(javax.swing.JTextField.CENTER);
        esedekessegIg.setText(resourceMap.getString("esedekessegIg.text")); // NOI18N
        esedekessegIg.setDisabledTextColor(resourceMap.getColor("esedekessegIg.disabledTextColor")); // NOI18N
        esedekessegIg.setName("esedekessegIg"); // NOI18N

        jLabel16.setText(resourceMap.getString("jLabel16.text")); // NOI18N
        jLabel16.setName("jLabel16"); // NOI18N

        esedekessegTolCal.setIcon(resourceMap.getIcon("esedekessegTolCal.icon")); // NOI18N
        esedekessegTolCal.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        esedekessegTolCal.setName("esedekessegTolCal"); // NOI18N
        esedekessegTolCal.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                esedekessegTolCalMouseClicked(evt);
            }
        });

        esedekessegTol.setEditable(false);
        esedekessegTol.setBackground(resourceMap.getColor("esedekessegTol.background")); // NOI18N
        esedekessegTol.setHorizontalAlignment(javax.swing.JTextField.CENTER);
        esedekessegTol.setText(resourceMap.getString("esedekessegTol.text")); // NOI18N
        esedekessegTol.setDisabledTextColor(resourceMap.getColor("esedekessegTol.disabledTextColor")); // NOI18N
        esedekessegTol.setName("esedekessegTol"); // NOI18N

        javax.swing.GroupLayout jPanel9Layout = new javax.swing.GroupLayout(jPanel9);
        jPanel9.setLayout(jPanel9Layout);
        jPanel9Layout.setHorizontalGroup(
            jPanel9Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel9Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(esedekessegTol, javax.swing.GroupLayout.PREFERRED_SIZE, 68, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(esedekessegTolCal)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jLabel16)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(esedekessegIg, javax.swing.GroupLayout.PREFERRED_SIZE, 68, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(esedekessegIgCal)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jLabel14)
                .addContainerGap(98, Short.MAX_VALUE))
        );
        jPanel9Layout.setVerticalGroup(
            jPanel9Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel9Layout.createSequentialGroup()
                .addGroup(jPanel9Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(jLabel14, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addGroup(javax.swing.GroupLayout.Alignment.LEADING, jPanel9Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                        .addComponent(esedekessegIg, javax.swing.GroupLayout.Alignment.LEADING)
                        .addComponent(esedekessegIgCal, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(esedekessegTol, javax.swing.GroupLayout.Alignment.LEADING)
                        .addComponent(esedekessegTolCal, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(jLabel16)))
                .addContainerGap())
        );

        jPanel10.setBorder(javax.swing.BorderFactory.createTitledBorder(javax.swing.BorderFactory.createLineBorder(resourceMap.getColor("jPanel10.border.border.lineColor")), resourceMap.getString("jPanel10.border.title"), javax.swing.border.TitledBorder.DEFAULT_JUSTIFICATION, javax.swing.border.TitledBorder.DEFAULT_POSITION, resourceMap.getFont("jPanel10.border.titleFont"))); // NOI18N
        jPanel10.setName("jPanel10"); // NOI18N
        jPanel10.setPreferredSize(new java.awt.Dimension(575, 146));

        jLabel18.setText(resourceMap.getString("jLabel18.text")); // NOI18N
        jLabel18.setName("jLabel18"); // NOI18N

        kifizetesIgCal.setIcon(resourceMap.getIcon("kifizetesIgCal.icon")); // NOI18N
        kifizetesIgCal.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        kifizetesIgCal.setName("kifizetesIgCal"); // NOI18N
        kifizetesIgCal.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                kifizetesIgCalMouseClicked(evt);
            }
        });

        kifizetesIg.setEditable(false);
        kifizetesIg.setBackground(resourceMap.getColor("kifizetesIg.background")); // NOI18N
        kifizetesIg.setHorizontalAlignment(javax.swing.JTextField.CENTER);
        kifizetesIg.setText(resourceMap.getString("kifizetesIg.text")); // NOI18N
        kifizetesIg.setDisabledTextColor(resourceMap.getColor("kifizetesIg.disabledTextColor")); // NOI18N
        kifizetesIg.setName("kifizetesIg"); // NOI18N

        jLabel20.setText(resourceMap.getString("jLabel20.text")); // NOI18N
        jLabel20.setName("jLabel20"); // NOI18N

        kifizetesTolCal.setIcon(resourceMap.getIcon("kifizetesTolCal.icon")); // NOI18N
        kifizetesTolCal.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        kifizetesTolCal.setName("kifizetesTolCal"); // NOI18N
        kifizetesTolCal.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                kifizetesTolCalMouseClicked(evt);
            }
        });

        kifizetesTol.setEditable(false);
        kifizetesTol.setBackground(resourceMap.getColor("kifizetesTol.background")); // NOI18N
        kifizetesTol.setHorizontalAlignment(javax.swing.JTextField.CENTER);
        kifizetesTol.setText(resourceMap.getString("kifizetesTol.text")); // NOI18N
        kifizetesTol.setDisabledTextColor(resourceMap.getColor("kifizetesTol.disabledTextColor")); // NOI18N
        kifizetesTol.setName("kifizetesTol"); // NOI18N

        javax.swing.GroupLayout jPanel10Layout = new javax.swing.GroupLayout(jPanel10);
        jPanel10.setLayout(jPanel10Layout);
        jPanel10Layout.setHorizontalGroup(
            jPanel10Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel10Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(kifizetesTol, javax.swing.GroupLayout.PREFERRED_SIZE, 68, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(kifizetesTolCal)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jLabel20)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(kifizetesIg, javax.swing.GroupLayout.PREFERRED_SIZE, 68, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(kifizetesIgCal)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jLabel18)
                .addContainerGap(121, Short.MAX_VALUE))
        );
        jPanel10Layout.setVerticalGroup(
            jPanel10Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel10Layout.createSequentialGroup()
                .addGroup(jPanel10Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(jLabel18, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addGroup(javax.swing.GroupLayout.Alignment.LEADING, jPanel10Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                        .addComponent(kifizetesIg, javax.swing.GroupLayout.Alignment.LEADING)
                        .addComponent(kifizetesIgCal, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(kifizetesTol, javax.swing.GroupLayout.Alignment.LEADING)
                        .addComponent(kifizetesTolCal, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(jLabel20)))
                .addContainerGap())
        );

        DetailedSearchButton.setFont(resourceMap.getFont("DetailedSearchButton.font")); // NOI18N
        DetailedSearchButton.setText(resourceMap.getString("DetailedSearchButton.text")); // NOI18N
        DetailedSearchButton.setName("DetailedSearchButton"); // NOI18N
        DetailedSearchButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                DetailedSearchButtonActionPerformed(evt);
            }
        });

        DetailedSearchToDefaultButton.setText(resourceMap.getString("DetailedSearchToDefaultButton.text")); // NOI18N
        DetailedSearchToDefaultButton.setName("DetailedSearchToDefaultButton"); // NOI18N
        DetailedSearchToDefaultButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                DetailedSearchToDefaultButtonActionPerformed(evt);
            }
        });

        jPanel11.setBorder(javax.swing.BorderFactory.createTitledBorder(javax.swing.BorderFactory.createLineBorder(resourceMap.getColor("jPanel11.border.border.lineColor")), resourceMap.getString("jPanel11.border.title"), javax.swing.border.TitledBorder.DEFAULT_JUSTIFICATION, javax.swing.border.TitledBorder.DEFAULT_POSITION, resourceMap.getFont("jPanel11.border.titleFont"))); // NOI18N
        jPanel11.setName("jPanel11"); // NOI18N
        jPanel11.setPreferredSize(new java.awt.Dimension(575, 146));

        keszpenzCheckBox.setSelected(true);
        keszpenzCheckBox.setText(resourceMap.getString("keszpenzCheckBox.text")); // NOI18N
        keszpenzCheckBox.setName("keszpenzCheckBox"); // NOI18N

        atutalasCheckBox.setSelected(true);
        atutalasCheckBox.setText(resourceMap.getString("atutalasCheckBox.text")); // NOI18N
        atutalasCheckBox.setName("atutalasCheckBox"); // NOI18N

        utanvetCheckBox.setSelected(true);
        utanvetCheckBox.setText(resourceMap.getString("utanvetCheckBox.text")); // NOI18N
        utanvetCheckBox.setName("utanvetCheckBox"); // NOI18N

        javax.swing.GroupLayout jPanel11Layout = new javax.swing.GroupLayout(jPanel11);
        jPanel11.setLayout(jPanel11Layout);
        jPanel11Layout.setHorizontalGroup(
            jPanel11Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel11Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(keszpenzCheckBox)
                .addGap(18, 18, 18)
                .addComponent(atutalasCheckBox)
                .addGap(18, 18, 18)
                .addComponent(utanvetCheckBox)
                .addContainerGap(219, Short.MAX_VALUE))
        );
        jPanel11Layout.setVerticalGroup(
            jPanel11Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel11Layout.createSequentialGroup()
                .addGroup(jPanel11Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(keszpenzCheckBox)
                    .addComponent(atutalasCheckBox)
                    .addComponent(utanvetCheckBox))
                .addContainerGap(8, Short.MAX_VALUE))
        );

        javax.swing.GroupLayout reszletesKeresesDialogLayout = new javax.swing.GroupLayout(reszletesKeresesDialog.getContentPane());
        reszletesKeresesDialog.getContentPane().setLayout(reszletesKeresesDialogLayout);
        reszletesKeresesDialogLayout.setHorizontalGroup(
            reszletesKeresesDialogLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, reszletesKeresesDialogLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(reszletesKeresesDialogLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(jPanel11, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, 468, Short.MAX_VALUE)
                    .addComponent(jPanel5, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, 468, Short.MAX_VALUE)
                    .addComponent(jPanel10, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, 468, Short.MAX_VALUE)
                    .addComponent(jPanel7, javax.swing.GroupLayout.DEFAULT_SIZE, 468, Short.MAX_VALUE)
                    .addComponent(jPanel9, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, 468, Short.MAX_VALUE)
                    .addComponent(jPanel8, javax.swing.GroupLayout.DEFAULT_SIZE, 468, Short.MAX_VALUE)
                    .addGroup(reszletesKeresesDialogLayout.createSequentialGroup()
                        .addComponent(DetailedSearchToDefaultButton)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(DetailedSearchButton)))
                .addContainerGap())
        );
        reszletesKeresesDialogLayout.setVerticalGroup(
            reszletesKeresesDialogLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(reszletesKeresesDialogLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jPanel5, javax.swing.GroupLayout.PREFERRED_SIZE, 59, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jPanel7, javax.swing.GroupLayout.PREFERRED_SIZE, 53, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jPanel8, javax.swing.GroupLayout.PREFERRED_SIZE, 53, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jPanel9, javax.swing.GroupLayout.PREFERRED_SIZE, 53, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jPanel10, javax.swing.GroupLayout.PREFERRED_SIZE, 53, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jPanel11, javax.swing.GroupLayout.PREFERRED_SIZE, 53, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addGroup(reszletesKeresesDialogLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(DetailedSearchButton)
                    .addComponent(DetailedSearchToDefaultButton))
                .addContainerGap())
        );

        setName("Form"); // NOI18N

        sorszamozas.setFont(resourceMap.getFont("sorszamozas.font")); // NOI18N
        sorszamozas.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "sorszámozás" }));
        sorszamozas.setName("sorszamozas"); // NOI18N
        sorszamozas.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                sorszamozasItemStateChanged(evt);
            }
        });

        kereses.setFont(resourceMap.getFont("kereses.font")); // NOI18N
        kereses.setText(resourceMap.getString("kereses.text")); // NOI18N
        kereses.setName("kereses"); // NOI18N
        kereses.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyReleased(java.awt.event.KeyEvent evt) {
                keresesKeyReleased(evt);
            }
        });

        szamlaScrollPane.setName("szamlaScrollPane"); // NOI18N

        szamlakTable.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "Title 1", "Title 2", "Title 3", "Title 4", "null", "null", "null", "null", "null", "null", "null", "null", "null", "null", "null", "null", "null", "null", "null", "null", "null"
            }
        ) {
            boolean[] canEdit = new boolean [] {
                false, false, false, false, false, false, false, true, false, false, false, false, false, false, false, false, false, false, false, false, false
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        szamlakTable.setAutoResizeMode(javax.swing.JTable.AUTO_RESIZE_OFF);
        szamlakTable.setName("szamlakTable"); // NOI18N
        szamlakTable.setRowHeight(20);
        szamlakTable.getTableHeader().setReorderingAllowed(false);
        szamlakTable.addMouseMotionListener(new java.awt.event.MouseMotionAdapter() {
            public void mouseDragged(java.awt.event.MouseEvent evt) {
                szamlakTableMouseDragged(evt);
            }
        });
        szamlakTable.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                szamlakTableMouseClicked(evt);
            }
            public void mouseReleased(java.awt.event.MouseEvent evt) {
                szamlakTableMouseReleased(evt);
            }
        });
        szamlakTable.addComponentListener(new java.awt.event.ComponentAdapter() {
            public void componentResized(java.awt.event.ComponentEvent evt) {
                szamlakTableComponentResized(evt);
            }
        });
        szamlakTable.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyReleased(java.awt.event.KeyEvent evt) {
                szamlakTableKeyReleased(evt);
            }
        });
        szamlaScrollPane.setViewportView(szamlakTable);
        if (szamlakTable.getColumnModel().getColumnCount() > 0) {
            szamlakTable.getColumnModel().getColumn(0).setHeaderValue(resourceMap.getString("szamlakTable.columnModel.title0")); // NOI18N
            szamlakTable.getColumnModel().getColumn(1).setHeaderValue(resourceMap.getString("szamlakTable.columnModel.title1")); // NOI18N
            szamlakTable.getColumnModel().getColumn(2).setHeaderValue(resourceMap.getString("szamlakTable.columnModel.title2")); // NOI18N
            szamlakTable.getColumnModel().getColumn(3).setHeaderValue(resourceMap.getString("szamlakTable.columnModel.title3")); // NOI18N
            szamlakTable.getColumnModel().getColumn(4).setHeaderValue(resourceMap.getString("szamlakTable.columnModel.title4")); // NOI18N
            szamlakTable.getColumnModel().getColumn(5).setHeaderValue(resourceMap.getString("szamlakTable.columnModel.title5")); // NOI18N
            szamlakTable.getColumnModel().getColumn(6).setHeaderValue(resourceMap.getString("szamlakTable.columnModel.title6")); // NOI18N
            szamlakTable.getColumnModel().getColumn(7).setHeaderValue(resourceMap.getString("szamlakTable.columnModel.title7")); // NOI18N
            szamlakTable.getColumnModel().getColumn(8).setHeaderValue(resourceMap.getString("szamlakTable.columnModel.title8")); // NOI18N
            szamlakTable.getColumnModel().getColumn(9).setHeaderValue(resourceMap.getString("szamlakTable.columnModel.title9")); // NOI18N
            szamlakTable.getColumnModel().getColumn(10).setHeaderValue(resourceMap.getString("szamlakTable.columnModel.title10")); // NOI18N
            szamlakTable.getColumnModel().getColumn(11).setHeaderValue(resourceMap.getString("szamlakTable.columnModel.title11")); // NOI18N
            szamlakTable.getColumnModel().getColumn(12).setHeaderValue(resourceMap.getString("szamlakTable.columnModel.title12")); // NOI18N
            szamlakTable.getColumnModel().getColumn(13).setHeaderValue(resourceMap.getString("szamlakTable.columnModel.title13")); // NOI18N
            szamlakTable.getColumnModel().getColumn(14).setHeaderValue(resourceMap.getString("szamlakTable.columnModel.title14")); // NOI18N
            szamlakTable.getColumnModel().getColumn(15).setHeaderValue(resourceMap.getString("szamlakTable.columnModel.title15")); // NOI18N
            szamlakTable.getColumnModel().getColumn(16).setHeaderValue(resourceMap.getString("szamlakTable.columnModel.title16")); // NOI18N
            szamlakTable.getColumnModel().getColumn(17).setHeaderValue(resourceMap.getString("szamlakTable.columnModel.title17")); // NOI18N
            szamlakTable.getColumnModel().getColumn(18).setHeaderValue(resourceMap.getString("szamlakTable.columnModel.title18")); // NOI18N
            szamlakTable.getColumnModel().getColumn(19).setHeaderValue(resourceMap.getString("szamlakTable.columnModel.title19")); // NOI18N
            szamlakTable.getColumnModel().getColumn(20).setHeaderValue(resourceMap.getString("szamlakTable.columnModel.title20")); // NOI18N
        }

        sumScrollPane.setName("sumScrollPane"); // NOI18N

        sumTable.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null}
            },
            new String [] {
                "Title 1", "Title 2", "Title 3", "Title 4", "null", "null", "null", "null", "null", "null", "null", "null", "null", "null", "null", "null", "null", "null", "null"
            }
        ) {
            boolean[] canEdit = new boolean [] {
                false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        sumTable.setAutoResizeMode(javax.swing.JTable.AUTO_RESIZE_OFF);
        sumTable.setName("sumTable"); // NOI18N
        sumTable.setRowHeight(20);
        sumTable.addComponentListener(new java.awt.event.ComponentAdapter() {
            public void componentResized(java.awt.event.ComponentEvent evt) {
                sumTableComponentResized(evt);
            }
        });
        sumScrollPane.setViewportView(sumTable);
        if (sumTable.getColumnModel().getColumnCount() > 0) {
            sumTable.getColumnModel().getColumn(0).setHeaderValue(resourceMap.getString("sumTable.columnModel.title0")); // NOI18N
            sumTable.getColumnModel().getColumn(1).setHeaderValue(resourceMap.getString("sumTable.columnModel.title1")); // NOI18N
            sumTable.getColumnModel().getColumn(2).setHeaderValue(resourceMap.getString("sumTable.columnModel.title2")); // NOI18N
            sumTable.getColumnModel().getColumn(3).setHeaderValue(resourceMap.getString("sumTable.columnModel.title3")); // NOI18N
            sumTable.getColumnModel().getColumn(4).setHeaderValue(resourceMap.getString("sumTable.columnModel.title4")); // NOI18N
            sumTable.getColumnModel().getColumn(5).setHeaderValue(resourceMap.getString("sumTable.columnModel.title5")); // NOI18N
            sumTable.getColumnModel().getColumn(6).setHeaderValue(resourceMap.getString("sumTable.columnModel.title6")); // NOI18N
            sumTable.getColumnModel().getColumn(7).setHeaderValue(resourceMap.getString("sumTable.columnModel.title7")); // NOI18N
            sumTable.getColumnModel().getColumn(8).setHeaderValue(resourceMap.getString("sumTable.columnModel.title8")); // NOI18N
            sumTable.getColumnModel().getColumn(9).setHeaderValue(resourceMap.getString("sumTable.columnModel.title9")); // NOI18N
            sumTable.getColumnModel().getColumn(10).setHeaderValue(resourceMap.getString("sumTable.columnModel.title10")); // NOI18N
            sumTable.getColumnModel().getColumn(11).setHeaderValue(resourceMap.getString("sumTable.columnModel.title11")); // NOI18N
            sumTable.getColumnModel().getColumn(12).setHeaderValue(resourceMap.getString("sumTable.columnModel.title12")); // NOI18N
            sumTable.getColumnModel().getColumn(13).setHeaderValue(resourceMap.getString("sumTable.columnModel.title13")); // NOI18N
            sumTable.getColumnModel().getColumn(14).setHeaderValue(resourceMap.getString("sumTable.columnModel.title14")); // NOI18N
            sumTable.getColumnModel().getColumn(15).setHeaderValue(resourceMap.getString("sumTable.columnModel.title15")); // NOI18N
            sumTable.getColumnModel().getColumn(16).setHeaderValue(resourceMap.getString("sumTable.columnModel.title16")); // NOI18N
            sumTable.getColumnModel().getColumn(17).setHeaderValue(resourceMap.getString("sumTable.columnModel.title17")); // NOI18N
            sumTable.getColumnModel().getColumn(18).setHeaderValue(resourceMap.getString("sumTable.columnModel.title18")); // NOI18N
        }

        nemNyomtatottCheckBox.setText(resourceMap.getString("nemNyomtatottCheckBox.text")); // NOI18N
        nemNyomtatottCheckBox.setName("nemNyomtatottCheckBox"); // NOI18N
        nemNyomtatottCheckBox.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                nemNyomtatottCheckBoxActionPerformed(evt);
            }
        });

        jPanel1.setBorder(javax.swing.BorderFactory.createLineBorder(resourceMap.getColor("jPanel1.border.lineColor"))); // NOI18N
        jPanel1.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        jPanel1.setName("jPanel1"); // NOI18N
        jPanel1.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseEntered(java.awt.event.MouseEvent evt) {
                jPanel1MouseEntered(evt);
            }
            public void mouseExited(java.awt.event.MouseEvent evt) {
                jPanel1MouseExited(evt);
            }
        });

        ReszletesKereses.setFont(resourceMap.getFont("ReszletesKereses.font")); // NOI18N
        ReszletesKereses.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        ReszletesKereses.setIcon(resourceMap.getIcon("ReszletesKereses.icon")); // NOI18N
        ReszletesKereses.setText(resourceMap.getString("ReszletesKereses.text")); // NOI18N
        ReszletesKereses.setName("ReszletesKereses"); // NOI18N
        ReszletesKereses.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                ReszletesKeresesMouseClicked(evt);
            }
            public void mouseEntered(java.awt.event.MouseEvent evt) {
                ReszletesKeresesMouseEntered(evt);
            }
            public void mouseExited(java.awt.event.MouseEvent evt) {
                ReszletesKeresesMouseExited(evt);
            }
        });

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel1Layout.createSequentialGroup()
                .addComponent(ReszletesKereses, javax.swing.GroupLayout.PREFERRED_SIZE, 141, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap())
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(ReszletesKereses, javax.swing.GroupLayout.PREFERRED_SIZE, 31, javax.swing.GroupLayout.PREFERRED_SIZE)
        );

        EasySearchComboBox.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "Összes", "Kintlévőség", "Határidőn túli kintlévőség" }));
        EasySearchComboBox.setName("EasySearchComboBox"); // NOI18N
        EasySearchComboBox.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                EasySearchComboBoxItemStateChanged(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(sumScrollPane, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, 880, Short.MAX_VALUE)
                    .addComponent(szamlaScrollPane, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, 880, Short.MAX_VALUE)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(kereses)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(nemNyomtatottCheckBox)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(EasySearchComboBox, javax.swing.GroupLayout.PREFERRED_SIZE, 127, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, 141, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(sorszamozas, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(jPanel1, 0, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(sorszamozas)
                    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(kereses, javax.swing.GroupLayout.PREFERRED_SIZE, 32, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addComponent(nemNyomtatottCheckBox, javax.swing.GroupLayout.PREFERRED_SIZE, 30, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addComponent(EasySearchComboBox, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(szamlaScrollPane, javax.swing.GroupLayout.DEFAULT_SIZE, 377, Short.MAX_VALUE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(sumScrollPane, javax.swing.GroupLayout.PREFERRED_SIZE, 85, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap())
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void szamlakTableComponentResized(java.awt.event.ComponentEvent evt) {//GEN-FIRST:event_szamlakTableComponentResized
        if (b)
        {
            String width = "";
            int count = szamlakTable.getColumnCount();
            for (int i = 0; i < count; i++) {
                int w = szamlakTable.getColumnModel().getColumn(i).getWidth();
                sumTable.getColumnModel().getColumn(i).setPreferredWidth(w);
                width += w + "";
                if (i < count - 1) {
                    width += ";";
                }
            }
            Settings.set("szamlaTableHeader", width);
        }
    }//GEN-LAST:event_szamlakTableComponentResized

    private void sumTableComponentResized(java.awt.event.ComponentEvent evt) {//GEN-FIRST:event_sumTableComponentResized
        if (b)
        {
            for (int i = 0; i < sumTable.getColumnCount(); i++)
            {
                szamlakTable.getColumnModel().getColumn(i).setPreferredWidth(sumTable.getColumnModel().getColumn(i).getWidth());
            }
        }
    }//GEN-LAST:event_sumTableComponentResized

    private void keresesKeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_keresesKeyReleased
        System.out.println("keresesKeyReleased");
        frissites();
    }//GEN-LAST:event_keresesKeyReleased

    private void nemNyomtatottCheckBoxActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_nemNyomtatottCheckBoxActionPerformed
//        kintlevosegCheckBox.setSelected(false);
        System.out.println("nemNyomtatottCheckBoxActionPerformed");
        frissites();
    }//GEN-LAST:event_nemNyomtatottCheckBoxActionPerformed

    private void szamlakTableMouseReleased(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_szamlakTableMouseReleased
        if (evt.isPopupTrigger()) {
            JTable source = (JTable) evt.getSource();
            int row = source.rowAtPoint(evt.getPoint());
            int column = source.columnAtPoint(evt.getPoint());

            if (!source.isRowSelected(row)) {
                source.changeSelection(row, column, false, false);
            }

            int[] rows = source.getSelectedRows();
            Component[] comps = szamlaPopupMenu.getComponents();
            if (rows.length > 1) {
                for (Component c : comps) {
                    c.setVisible(false);
                }
            } else {
                for (Component c : comps) {
                    c.setVisible(true);
                }
            }
            csvKeszitesEgyszeruMenuItem.setVisible(true);
            csvKeszitesReszletesMenuItem.setVisible(true);
            kifizetesMenuItem.setVisible(true);
            kijeloltekTermekdijKimutatas.setVisible(true);

            kintlevosegLevelEmailMenuItem.setVisible(true);
            kintlevosegLevelPDFMenuItem.setVisible(true);

//            kintlevosegMenuEmail.setVisible(true);
//            kintlevosegMenuPDF.setVisible(true);
            nyomtatasMenuItem.setVisible(true);

            szamlaPopupMenu.show(evt.getComponent(), evt.getX(), evt.getY());
        }
    }//GEN-LAST:event_szamlakTableMouseReleased

    private void masolatMenuItemActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_masolatMenuItemActionPerformed
        int row = szamlakTable.getSelectedRow();
        String azon = String.valueOf(szamlakTable.getValueAt(row, 18));
        Szamla szla = new Szamla(azon);
        SzamlaDialogOld sz = SzamlaDialogOld.createMasolatSzamla(szla);
//        SzamlaDialogOld sz = new SzamlaDialogOld(szla);
    }//GEN-LAST:event_masolatMenuItemActionPerformed

    private void jPanel1MouseEntered(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jPanel1MouseEntered
        jPanel1.setBackground(Color.decode("#abd043"));
    }//GEN-LAST:event_jPanel1MouseEntered

    private void jPanel1MouseExited(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jPanel1MouseExited
        jPanel1.setBackground(Color.decode("#f0f0f0"));
    }//GEN-LAST:event_jPanel1MouseExited

    private void szamlakTableMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_szamlakTableMouseClicked
        int row = szamlakTable.getSelectedRow();
        if (evt.getClickCount() == 2 && evt.getButton() == MouseEvent.BUTTON1) {
            folyamatbanDialog = new FolyamatbanDialog("Számla adatok betöltése...");
            SzamlaAdatokThread sz = new SzamlaAdatokThread(row);
            folyamatbanDialog.setVisible(true);
        }
        osszesit();
    }//GEN-LAST:event_szamlakTableMouseClicked

    private void szamlakTableKeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_szamlakTableKeyReleased
        osszesit();
    }//GEN-LAST:event_szamlakTableKeyReleased

    private void szamlakTableMouseDragged(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_szamlakTableMouseDragged
        osszesit();
    }//GEN-LAST:event_szamlakTableMouseDragged

    private void kifizetesMenuItemActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_kifizetesMenuItemActionPerformed
        int[] rows = szamlakTable.getSelectedRows();
        if (rows.length == 1) {
            SzamlaKifizetesDialog k = new SzamlaKifizetesDialog(
                    String.valueOf(szamlakTable.getValueAt(rows[0], 0)),
                    String.valueOf(szamlakTable.getValueAt(rows[0], 18)),
                    String.valueOf(szamlakTable.getValueAt(rows[0], 7)));
            if (k.getReturnStatus() == 1)
            {
                System.out.println("kifizetesMenuItemActionPerformed");
                frissites();
            }
        } else {
            String[][] ids = new String[rows.length][3];
            for (int i = 0; i < rows.length; i++) {
                ids[i][0] = String.valueOf(szamlakTable.getValueAt(rows[i], 0));
                ids[i][1] = String.valueOf(szamlakTable.getValueAt(rows[i], 18));
                ids[i][2] = String.valueOf(szamlakTable.getValueAt(rows[i], 7));
            }
            SzamlaKifizetesDialog k = new SzamlaKifizetesDialog(ids);
            if (k.getReturnStatus() == 1) {
                System.out.println("kifizetesMenuItemActionPerformed");
                frissites();
            }
        }
    }//GEN-LAST:event_kifizetesMenuItemActionPerformed

    private void nyomtatasMenuItemActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_nyomtatasMenuItemActionPerformed
        int[] rows = szamlakTable.getSelectedRows();
        if (rows.length != 0) {
            for (int i = 0; i < rows.length; i++) {
                nyomtatasAzon = String.valueOf(szamlakTable.getValueAt(rows[i], 18));
                Query query = new Query.QueryBuilder()
                        .select("nyomtatva")
                        .from("szamlazo_szamla")
                        .where("azon = '" + nyomtatasAzon + "'")
                        .build();
                Object[][] select = App.db.select(query.getQuery());
                nyomtatasLabel.setText("A(z) " + String.valueOf(szamlakTable.getValueAt(rows[i], 0)) + " számla nyomtatása");
                nyit(nyomtatasDialog, "Nyomtatás");
            }
        }

    }//GEN-LAST:event_nyomtatasMenuItemActionPerformed

    private void jPanel2MouseEntered(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jPanel2MouseEntered
        jPanel2.setBackground(Color.decode("#abd043"));
    }//GEN-LAST:event_jPanel2MouseEntered

    private void jPanel2MouseExited(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jPanel2MouseExited
        jPanel2.setBackground(Color.decode("#f0f0f0"));
    }//GEN-LAST:event_jPanel2MouseExited

    private void jPanel3MouseEntered(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jPanel3MouseEntered
        jPanel3.setBackground(Color.decode("#abd043"));
    }//GEN-LAST:event_jPanel3MouseEntered

    private void jPanel3MouseExited(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jPanel3MouseExited
        jPanel3.setBackground(Color.decode("#f0f0f0"));
    }//GEN-LAST:event_jPanel3MouseExited

    private void jPanel4MouseEntered(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jPanel4MouseEntered
        jPanel4.setBackground(Color.decode("#d24343"));
    }//GEN-LAST:event_jPanel4MouseEntered

    private void jPanel4MouseExited(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jPanel4MouseExited
        jPanel4.setBackground(Color.decode("#f0f0f0"));
    }//GEN-LAST:event_jPanel4MouseExited

    private void jPanel2MouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jPanel2MouseClicked
        folyamatbanDialog = new FolyamatbanDialog("Előnézet generálás folyamatban...");
        ElonezetThread e = new ElonezetThread();
        folyamatbanDialog.setVisible(true);
    }//GEN-LAST:event_jPanel2MouseClicked

    private void jPanel4MouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jPanel4MouseClicked
        nyomtatasDialog.setVisible(false);
    }//GEN-LAST:event_jPanel4MouseClicked

    private void jPanel3MouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jPanel3MouseClicked
        ElonezetDialog e = new ElonezetDialog(nyomtatasAzon, Integer.parseInt(nyomtatasPeldany.getText()), ElonezetDialog.NYOMTATAS);
        App.db.insert("UPDATE szamlazo_szamla SET nyomtatva = 1 WHERE azon = '" + nyomtatasAzon + "'", null, 0);
        nyomtatasDialog.setVisible(false);
    }//GEN-LAST:event_jPanel3MouseClicked

    private void csvKeszitesReszletesMenuItemActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_csvKeszitesReszletesMenuItemActionPerformed
        File file = new File("reszletes_export.csv");
        try {
            JFileChooser chooser = new JFileChooser();
            chooser.setSelectedFile(file);
            chooser.showOpenDialog(null);
            File curFile = chooser.getSelectedFile();
            kijeloltCsvKeszitese(curFile, true);
        } catch (Exception ex) {
            HibaDialog h = new HibaDialog("Sikertelen mentés!", "Ok", "");
        }
    }//GEN-LAST:event_csvKeszitesReszletesMenuItemActionPerformed

    private void helyesbitoMenuItemActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_helyesbitoMenuItemActionPerformed
        int row = szamlakTable.getSelectedRow();
        String azon = String.valueOf(szamlakTable.getValueAt(row, 18));
        Szamla szml = new Szamla(azon);
        SzamlaDialogOld sz = SzamlaDialogOld.createModositoSzamla(szml);
//        SzamlaDialogOld sz = new SzamlaDialogOld(String.valueOf(szamlakTable.getValueAt(row, 18)), true);
        if (sz.getReturnStatus() == 1) {
            System.out.println("helyesbitoMenuItemActionPerformed");
            frissites();
        }
    }//GEN-LAST:event_helyesbitoMenuItemActionPerformed

    private void stornoMenuItemActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_stornoMenuItemActionPerformed
        int row = szamlakTable.getSelectedRow();
        
        SzamlaDialogOld sz = SzamlaDialogOld.createStornoSzamla(String.valueOf(szamlakTable.getValueAt(row, 18)), false);
        if (sz.getReturnStatus() == 1)
        {
            System.out.println("stornoMenuItemActionPerformed");
            frissites();
        }  
    }//GEN-LAST:event_stornoMenuItemActionPerformed

    private void pdfKeszitesMenuItemActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_pdfKeszitesMenuItemActionPerformed
        int row = szamlakTable.getSelectedRow();
        folyamatbanDialog = new FolyamatbanDialog("Pdf generálás folyamatban...");
        PdfThread p = new PdfThread(row);
        folyamatbanDialog.setVisible(true);
    }//GEN-LAST:event_pdfKeszitesMenuItemActionPerformed

    private void kijeloltekTermekdijKimutatasActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_kijeloltekTermekdijKimutatasActionPerformed
        File file = new File("termekdij-kimutatas.csv");
        try {
            JFileChooser chooser = new JFileChooser();
            chooser.setSelectedFile(file);
            chooser.showOpenDialog(null);
            File curFile = chooser.getSelectedFile();
            kijeloltTermekdijKimutatasKeszitese(curFile);
        } catch (Exception ex) {
            HibaDialog h = new HibaDialog("Sikertelen mentés!", "Ok", "");
        }
    }//GEN-LAST:event_kijeloltekTermekdijKimutatasActionPerformed

    private void ReszletesKeresesMouseExited(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_ReszletesKeresesMouseExited
        ReszletesKereses.setBackground(Color.decode("#F0F0F0"));
    }//GEN-LAST:event_ReszletesKeresesMouseExited

    private void ReszletesKeresesMouseEntered(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_ReszletesKeresesMouseEntered
        ReszletesKereses.setBackground(Color.decode("#ABD043"));
    }//GEN-LAST:event_ReszletesKeresesMouseEntered

    private void ReszletesKeresesMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_ReszletesKeresesMouseClicked
        nyit(reszletesKeresesDialog, "Részletes keresés");
    }//GEN-LAST:event_ReszletesKeresesMouseClicked

    private void keltTolCalMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_keltTolCalMouseClicked
        CalendarDialog c = new CalendarDialog(this, keltTol);  
    }//GEN-LAST:event_keltTolCalMouseClicked

    private void keltIgCalMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_keltIgCalMouseClicked
        CalendarDialog c = new CalendarDialog(this, keltIg);
    }//GEN-LAST:event_keltIgCalMouseClicked

    private void teljesitesTolCalMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_teljesitesTolCalMouseClicked
        CalendarDialog c = new CalendarDialog(this, teljesitesTol);
    }//GEN-LAST:event_teljesitesTolCalMouseClicked

    private void teljesitesIgCalMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_teljesitesIgCalMouseClicked
        CalendarDialog c = new CalendarDialog(this, teljesitesIg);
    }//GEN-LAST:event_teljesitesIgCalMouseClicked

    private void esedekessegTolCalMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_esedekessegTolCalMouseClicked
        CalendarDialog c = new CalendarDialog(this, esedekessegTol);
    }//GEN-LAST:event_esedekessegTolCalMouseClicked

    private void esedekessegIgCalMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_esedekessegIgCalMouseClicked
        CalendarDialog c = new CalendarDialog(this, esedekessegIg);
    }//GEN-LAST:event_esedekessegIgCalMouseClicked

    private void kifizetesTolCalMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_kifizetesTolCalMouseClicked
        CalendarDialog c = new CalendarDialog(this, kifizetesTol);
    }//GEN-LAST:event_kifizetesTolCalMouseClicked

    private void kifizetesIgCalMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_kifizetesIgCalMouseClicked
        CalendarDialog c = new CalendarDialog(this, kifizetesIg);
    }//GEN-LAST:event_kifizetesIgCalMouseClicked

    private void DetailedSearchToDefaultButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_DetailedSearchToDefaultButtonActionPerformed
        keltTol.setText("");
        keltIg.setText("");
        teljesitesTol.setText("");
        teljesitesIg.setText("");
        esedekessegTol.setText("");
        esedekessegIg.setText("");
        kifizetesTol.setText("");
        kifizetesIg.setText("");
        //kintlevosegCheckBoxInAdvancedSearch.setSelected(false);
        normal.setSelected(false);
        helyesbito.setSelected(false);
        helyesbitett.setSelected(false);
        keszpenzCheckBox.setSelected(true);
        atutalasCheckBox.setSelected(true);
        utanvetCheckBox.setSelected(true);
    }//GEN-LAST:event_DetailedSearchToDefaultButtonActionPerformed

    private void DetailedSearchButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_DetailedSearchButtonActionPerformed
//        if (!kintlevosegCheckBoxInAdvancedSearch.isSelected() && !normal.isSelected() && !helyesbito.isSelected() && !helyesbitett.isSelected()) {
//            HibaDialog h = new HibaDialog("Legalább egy számla típus megadása kötelező!", "", "Ok");
//        } else 
        if (!keszpenzCheckBox.isSelected() && !atutalasCheckBox.isSelected() && !utanvetCheckBox.isSelected()) {
            HibaDialog h = new HibaDialog("Legalább egy számla kifizetés típus megadása kötelező!", "", "Ok");
        } else {
            reszletesKeresesDialog.setVisible(false);
            System.out.println("DetailedSearchButtonActionPerformed");
            frissites();
        }
    }//GEN-LAST:event_DetailedSearchButtonActionPerformed

private void csvKeszitesEgyszeruMenuItemActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_csvKeszitesEgyszeruMenuItemActionPerformed
    File file = new File("egyszeru_export.csv");
    try {
        JFileChooser chooser = new JFileChooser();
        chooser.setSelectedFile(file);
        chooser.showOpenDialog(null);
        File curFile = chooser.getSelectedFile();
        kijeloltCsvKeszitese(curFile, false);
    } catch (Exception ex) {
        HibaDialog h = new HibaDialog("Sikertelen mentés!", "Ok", "");
    }
}//GEN-LAST:event_csvKeszitesEgyszeruMenuItemActionPerformed

private void kintlevosegLevelEmailMenuItemActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_kintlevosegLevelEmailMenuItemActionPerformed
    int[] rows = szamlakTable.getSelectedRows();
    String[] azonositok = new String[rows.length];
    String[] names = new String[rows.length];
    List<KintlevosegKapcsolattartokGroup> list = new ArrayList<>();

    for (int i = 0; i < rows.length; i++) {
        names[i] = Functions.getStringFromObject(szamlakTable.getValueAt(rows[i], 1));
        azonositok[i] = String.valueOf(szamlakTable.getValueAt(rows[i], 18));
    }

    int count = 0;
    for (int i = 0; i < azonositok.length; i++) {
        String azon = azonositok[i];
        String name = names[i];
        KintlevosegKapcsolattartokGroup group = KintlevosegKapcsolattartokGroup.create();
        group.setName(name);
        if (list.isEmpty()) {
            list.add(group);
            list.get(0).addToAzonositok(azon);

        } else {
            for (int j = 0; j < list.size(); j++) {
                if (list.get(j).equals(group)) {
                    list.get(j).addToAzonositok(azon);
                } else {
                    if (!list.contains(group)) {
                        group.addToAzonositok(azon);
                        list.add(group);
                    }
                }
            }
        }
    }
    for (KintlevosegKapcsolattartokGroup kintlevosegKapcsolattartokGroup : list) {
        kintlevosegLevel(kintlevosegKapcsolattartokGroup.getAzonositokAsArray(), true);
    }
}//GEN-LAST:event_kintlevosegLevelEmailMenuItemActionPerformed

    private void teljesitesIgazolasNyomtatasaMenuItemActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_teljesitesIgazolasNyomtatasaMenuItemActionPerformed
        int row = szamlakTable.getSelectedRow();
        String azon = String.valueOf(szamlakTable.getValueAt(row, 18));
        Szamla szla = new Szamla(azon);
        TeljesítesIgazolasDialog teljesítesIgazolasDialog = new TeljesítesIgazolasDialog(szla);
        if (teljesítesIgazolasDialog.getReturnStatus() == 1) {
            System.out.println("teljesitesIgazolasNyomtatasaMenuItemActionPerformed");
            frissites();
        }
    }//GEN-LAST:event_teljesitesIgazolasNyomtatasaMenuItemActionPerformed

    private void kintlevosegCheckBoxInAdvancedSearchActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_kintlevosegCheckBoxInAdvancedSearchActionPerformed
//        kintlevosegCheckBox.setSelected(true);
    }//GEN-LAST:event_kintlevosegCheckBoxInAdvancedSearchActionPerformed

    private void kintlevosegLevelPDFMenuItemActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_kintlevosegLevelPDFMenuItemActionPerformed
//        int[] rows = szamlakTable.getSelectedRows();
//        String[] azonositok = new String[rows.length];
////        String keresText = "azon IN (";
//        for (int i = 0; i < rows.length; i++) {
////            keresText += "'" + String.valueOf(szamlakTable.getValueAt(rows[i], 18)) + "', ";
//            azonositok[i] = String.valueOf(szamlakTable.getValueAt(rows[i], 18));
//        }
//        kintlevosegPDF(azonositok, true);
        int[] rows = szamlakTable.getSelectedRows();
        String[] azonositok = new String[rows.length];
        String[] names = new String[rows.length];
        List<KintlevosegKapcsolattartokGroup> list = new ArrayList<>();

        for (int i = 0; i < rows.length; i++) {
            names[i] = Functions.getStringFromObject(szamlakTable.getValueAt(rows[i], 1));
            azonositok[i] = String.valueOf(szamlakTable.getValueAt(rows[i], 18));
        }

        int count = 0;
        for (int i = 0; i < azonositok.length; i++) {
            String azon = azonositok[i];
            String name = names[i];
            KintlevosegKapcsolattartokGroup group = KintlevosegKapcsolattartokGroup.create();
            group.setName(name);
            if (list.isEmpty()) {
                list.add(group);
                list.get(0).addToAzonositok(azon);

            }
            else
            {
                for (int j = 0; j < list.size(); j++)
                {
                    if (list.get(j).equals(group))
                    {
                        list.get(j).addToAzonositok(azon);
                    }
                    else
                    {
                        if (!list.contains(group))
                        {
                            group.addToAzonositok(azon);
                            list.add(group);
                        }
                    }
                }
            }
        }

        for (KintlevosegKapcsolattartokGroup kintlevosegKapcsolattartokGroup : list)
        {
            kintlevosegPDF(kintlevosegKapcsolattartokGroup.getAzonositokAsArray(), true);
        }
    }//GEN-LAST:event_kintlevosegLevelPDFMenuItemActionPerformed

    private void modositoMenuItemActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_modositoMenuItemActionPerformed
        int row = szamlakTable.getSelectedRow();
        String azon = String.valueOf(szamlakTable.getValueAt(row, 18));
        //String originalInvoiceNumber = String.valueOf(szamlakTable.getValueAt(row, 0));
        //System.out.println("Szamla azonosító: " + azon);
        Szamla szla = new Szamla(azon);
        SzamlaDialogOld sz = SzamlaDialogOld.createModositoSzamla(szla); 
    }//GEN-LAST:event_modositoMenuItemActionPerformed

    private void statusRefreshMenuItemActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_statusRefreshMenuItemActionPerformed
        try
        {
            String [] billingSoftwareDatas = new String[10];
            String [] SupplierDatas = new String[5];
            
            int row = szamlakTable.getSelectedRow();
            String azon = String.valueOf(szamlakTable.getValueAt(row, 18));
            Szamla szla = new Szamla(azon);
            
            Query query = new Query.QueryBuilder()
                    .select("TransactionID, szallito_nev, szallito_adoszam, sorszamozasid")
                    .from("szamlazo_szamla")
                    .where("azon LIKE " + azon)
                    .build();  
            Object [][] select = App.db.select(query.getQuery());
            String transactionID = select[0][0].toString();
            
            query = new Query.QueryBuilder()
                    .select("id")
                    .from("szamlazo_ceg_adatok")
                    .where("sorszamid LIKE " + select[0][3].toString())
                    .build();  
            Object [][] supplier = App.db.select(query.getQuery());
            
            Suppliers suppliers = new Suppliers();
            suppliers.setSupplierID(supplier[0][0].toString());
            
            GenerateXml gen = new GenerateXml();
            NAVConn con = new NAVConn();
            
            query = new Query.QueryBuilder()
                        .select("requestVersion, headerVersion, softwareMainVersion, softwareId, softwareName, softwareOperation, softwareDevName, softwareDevContact, softwareDevCountryCode, softwareTaxNumber")
                        .from("szamlazo_szoftver_adatok")
                        .where("1")
                        .build();
                Object [][] softwareDataResponse = App.db.select(query.getQuery());
                
                billingSoftwareDatas[0] = softwareDataResponse[0][0].toString();
                billingSoftwareDatas[1] = softwareDataResponse[0][1].toString();
                billingSoftwareDatas[2] = softwareDataResponse[0][2].toString();
                billingSoftwareDatas[3] = softwareDataResponse[0][3].toString();
                billingSoftwareDatas[4] = softwareDataResponse[0][4].toString();
                billingSoftwareDatas[5] = softwareDataResponse[0][5].toString();
                billingSoftwareDatas[6] = softwareDataResponse[0][6].toString();
                billingSoftwareDatas[7] = softwareDataResponse[0][7].toString();
                billingSoftwareDatas[8] = softwareDataResponse[0][8].toString();
                billingSoftwareDatas[9] = softwareDataResponse[0][9].toString();

                String supplierName = select[0][1].toString();
                String supplierTaxNumber = select[0][2].toString().split("-")[0];
                query = new Query.QueryBuilder()
                        .select("felhasznalonev, password, alairo_kulcs, csere_kulcs")
                        .from("szamlazo_ceg_adatok")
                        .where("nev LIKE '" + supplierName + "'")
                        .build();
                Object [][] supplierDataResponse = App.db.select(query.getQuery());
                
                SupplierDatas[0] = supplierTaxNumber;
                SupplierDatas[1] = supplierDataResponse[0][0].toString();
                SupplierDatas[2] = supplierDataResponse[0][1].toString();
                SupplierDatas[3] = supplierDataResponse[0][2].toString();
                SupplierDatas[4] = supplierDataResponse[0][3].toString();
            
            String file = gen.GetInvoiceStatusXml(billingSoftwareDatas, SupplierDatas, transactionID);
            String query2 = "queryInvoiceStatus";
            String response = con.GetStatus(query2, file);
            String statusResponse = response.split("<invoiceStatus>")[1].split("</invoiceStatus>")[0];
            
            Object[] szamlazoSzamlaObject = new Object[2];
            szamlazoSzamlaObject[0] = "";
            switch(statusResponse)
            {
                case "RECEIVED":
                    szamlazoSzamlaObject[0] = "1";
                    break;
                case "PROCESSING":
                    szamlazoSzamlaObject[0] = "2";
                    break;
                case "DONE":
                    szamlazoSzamlaObject[0] = "3";
                    break;
                case "ABORTED":
                    szamlazoSzamlaObject[0] = "4";
                    break;
                default:
                    szamlazoSzamlaObject[0] = "0";
                    break;
            }  
            szamlazoSzamlaObject[1] = transactionID;
            App.db.insert("UPDATE szamlazo_szamla SET NAVStatus = ? WHERE transactionID = ?", szamlazoSzamlaObject, 2);
            
            frissites();
        }
        catch (Exception ex)
        {
            ex.printStackTrace();
        }
    }//GEN-LAST:event_statusRefreshMenuItemActionPerformed
int sorszamozasItemStateChangeCounter = 0;
    private void sorszamozasItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_sorszamozasItemStateChanged
        if (sorszamozasItemStateChangeCounter > 1)
        {
            if (evt.getStateChange() == ItemEvent.SELECTED)
            {
                frissites();
            }
        }
        sorszamozasItemStateChangeCounter++;
    }//GEN-LAST:event_sorszamozasItemStateChanged

    private void EasySearchComboBoxItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_EasySearchComboBoxItemStateChanged
        firstInitEasyCombobox = true;
        if (firstInitEasyCombobox)
        {
            if (evt.getStateChange() == ItemEvent.SELECTED)
            {
                frissites();
            }     
        }         
    }//GEN-LAST:event_EasySearchComboBoxItemStateChanged

    private void reSendMenuItemActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_reSendMenuItemActionPerformed
        int row = szamlakTable.getSelectedRow();
        String azon = String.valueOf(szamlakTable.getValueAt(row, 18));
        
        Query query = new Query.QueryBuilder()
                    .select(  "szamla_sorszam, "    //0
                            + "fizetesi_mod, "      //1
                            + "szamla_csoport, "    //2
                            + "kelt, "              //3
                            + "esedekesseg, "       //4
                            + "teljesites, "        //5
                            + "kifizetes, "         //6
                            + "netto, "             //7
                            + "afa_ertek, "         //8
                            + "tipus, "             //9
                            + "nev, "               //10
                            + "irsz, "              //11
                            + "varos, "             //12
                            + "utca, "              //13
                            + "kozterulet, "        //14
                            + "hazszam, "           //15
                            + "orszag, "            //16
                            + "telefon, "           //17
                            + "email, "             //18
                            + "bankszamlaszam, "    //19
                            + "adoszam, "           //20
                            + "eu_adoszam, "        //21
                            + "valuta, "            //22
                            + "kozeparfolyam, "     //23
                            + "szallito_nev, "      //24
                            + "szallito_irsz, "     //25
                            + "szallito_varos, "    //26
                            + "szallito_utca, "     //27
                            + "szallito_adoszam, "  //28
                            + "szallito_eu_adoszam, "//29
                            + "szallito_bankszamlaszam, "//30
                            + "szallito_egyeb, "    //31
                            + "helyesbitett, "      //32
                            + "deviza, "            //33
                            + "atvallal, "          //34
                            + "NAVStatus, "         //35
                            + "TransactionID, "     //36
                            + "timestamp")          //37
                    .from("szamlazo_szamla")
                    .where("azon LIKE " + azon)
                    .build();  
        Object [][] select = App.db.select(query.getQuery());
        
        String operation = "";      
        
        query = new Query.QueryBuilder()
                    .select(  "szamla_sorszam, "    //0
                            + "termek, "            //1
                            + "termek_kod, "        //2
                            + "mennyiseg, "         //3
                            + "mennyisegi_egyseg, " //4
                            + "egysegar, "          //5
                            + "netto_ar, "          //6
                            + "afa, "               //7
                            + "engedmeny_felar, "   //8
                            + "vtsz_teszor, "       //9
                            + "azon, "              //10
                            + "afa_label, "         //11
                            + "modifiedproductID")  //12
                    .from("szamlazo_szamla_adatok")
                    .where("azon LIKE " + azon)
                    .build();  
        Object [][] termekek = App.db.select(query.getQuery());
        
        Object [] InvoiceAllData= new Object[9];
        
        String [] referenceDatas = new String[5];
        //originalInvoiceNumber            
            String originalInvoiceNumber = findOriginalInvoiceNumber(select[0][0].toString());
            if(select[0][32].equals(""))
            {
                operation = "CREATE";
            }
            else
            {
                if(select[0][9].equals("2"))
                {
                    operation = "STORNO";
                }
                else
                {
                    operation = "MODIFY";
                }   
            }
        //timeStamp
            DateFormat timeStamp = new SimpleDateFormat("yyyy-MM-dd'T'HH:mm:ss.SSS'Z'");
            timeStamp.setTimeZone(TimeZone.getTimeZone("GMT"));
            String timeSTAMP = timeStamp.format(new Date());
        //issueDate
            DateFormat issueDate = new SimpleDateFormat("yyyy-MM-dd");
            String issueDATE = issueDate.format(new Date());
        //lastModificationReference
            String lastModificationReference = findLastModificationReference(originalInvoiceNumber,select[0][0].toString());
        
            if(!operation.equals("CREATE"))
            {
                referenceDatas[0] = originalInvoiceNumber;
                referenceDatas[1] = issueDATE;
                referenceDatas[2] = timeSTAMP;
                referenceDatas[3] = lastModificationReference;
                if(referenceDatas[3].equals(originalInvoiceNumber))
                {
                    referenceDatas[3] = "";
                }

                query = new Query.QueryBuilder()
                        .select("NAVStatus")
                        .from("szamlazo_szamla")
                        .where("szamla_sorszam LIKE '" + originalInvoiceNumber + "'")
                        .build();
                Object [][] selectOriginalNavStatus = App.db.select(query.getQuery());

                if(Integer.valueOf(selectOriginalNavStatus[0][0].toString()) == 0)
                {
                    referenceDatas[4] = "true";       
                }
                else
                {
                    referenceDatas[4] = "false";
                }
            }
            else
            {
                for(int i = 0; i < referenceDatas.length; i++)
                {
                    referenceDatas[i] = "";
                }
            }
        
        String [] supplierInfo = new String[23];
        //supplierTaxNumber
            String [] supplierTaxNumber = select[0][28].toString().split("-");
            supplierInfo[0] = supplierTaxNumber[0];//TaxPayerId
            supplierInfo[1] = supplierTaxNumber[1];//VatCode
            supplierInfo[2] = supplierTaxNumber[2];//CountyCode
        //supplierName
            supplierInfo[7] = select[0][24].toString();
        //supplierAddress
            query = new Query.QueryBuilder()
                    .select("countryCode, irsz, varos, utca, kozterulet, hazszam, bankszamlaszam, id")
                    .from("szamlazo_ceg_adatok")
                    .where("nev LIKE '" + supplierInfo[7] + "'")
                    .build();
            Object [][] supplierDatas = App.db.select(query.getQuery());
            
            Suppliers suppliers = new Suppliers();
            suppliers.setSupplierID(supplierDatas[0][7].toString());
            
            supplierInfo[8]  = supplierDatas[0][0].toString();//countryCode
            supplierInfo[10] = supplierDatas[0][1].toString();//postalCode
            supplierInfo[11] = supplierDatas[0][2].toString().trim();//city      
            supplierInfo[12] = supplierDatas[0][3].toString().trim();//streetName
            supplierInfo[13] = supplierDatas[0][4].toString().trim();//publicPlaceCategory
            supplierInfo[14] = supplierDatas[0][5].toString().trim();//number
        //supplierBankAccountNumber
            supplierInfo[20] = supplierDatas[0][6].toString();//supplierBankAccountNumber        
        
        String [] customerInfo = new String[22];
        //customerTaxNumber
            String [] customerTaxNumber = select[0][20].toString().split("-");
            customerInfo[0] = customerTaxNumber[0];//TaxPayerId
            customerInfo[1] = customerTaxNumber[1];//VatCode
            customerInfo[2] = customerTaxNumber[2];//CountyCode
        //customerName
            customerInfo[8] = select[0][10].toString();
        //customerAddress
            customerInfo[9]  = select[0][16].toString();//countryCode
            customerInfo[11] = select[0][11].toString();//postalCode
            customerInfo[12] = select[0][12].toString().trim();//city
            customerInfo[13] = select[0][13].toString().trim();//streetName
            customerInfo[14] = select[0][14].toString().trim();//publicPlaceCategory
            customerInfo[15] = select[0][15].toString().trim();//number
        //customerBankAccountNumber
            customerInfo[21] = select[0][19].toString();
        
        String [] fiscalRepresentativeInfo = new String[17];
        //fiscalRepresentativeTaxNumber
            fiscalRepresentativeInfo[0] = "";//TaxPayerId
            fiscalRepresentativeInfo[1] = "";//VatCode
            fiscalRepresentativeInfo[2] = "";//CountyCode
        //fiscalName
            fiscalRepresentativeInfo[3] = "";
        //fiscalRepresentativeAddress
            fiscalRepresentativeInfo[4] = "";//countryCode
            fiscalRepresentativeInfo[5] = "";//region
            fiscalRepresentativeInfo[6] = "";//postalCode
            fiscalRepresentativeInfo[7] = "";//city
            fiscalRepresentativeInfo[8] = "";//streetName
            fiscalRepresentativeInfo[9] = "";//publicPlaceCategory
            fiscalRepresentativeInfo[10] = "";//number
            fiscalRepresentativeInfo[11] = "";//building
            fiscalRepresentativeInfo[12] = "";//staircase
            fiscalRepresentativeInfo[13] = "";//floor
            fiscalRepresentativeInfo[14] = "";//door
            fiscalRepresentativeInfo[15] = "";//lotNumber
        //fiscalBankAccountNumber
            fiscalRepresentativeInfo[16] = "";
            
        String [] invoiceData = new String[15];
            invoiceData[0] = select[0][0].toString();//invoiceNumber
            invoiceData[1] = "NORMAL";//invoiceCategory  others: SIMPLIFIED,AGGREGATE
            invoiceData[2] = "";//invoiceIssueDate
            invoiceData[3] = "";//invoiceDeliveryDate
            invoiceData[4] = "";//invoiceDeliveryPeriodStart
            invoiceData[5] = "";//invoiceDeliveryPeriodEnd
            invoiceData[6] = "";//invoiceAccountingDeliveryDate
            invoiceData[7] = select[0][22].toString().toUpperCase();
            invoiceData[8] = select[0][23].toString();//exchangeRate
            invoiceData[9] = "";//selfBillingIndicator            
            switch(select[0][1].toString())
            {
                case "0":
                    invoiceData[10] = "CASH";
                    break;
                case "1":
                    invoiceData[10] = "TRANSFER";
                    break;
                case "2":
                    invoiceData[10] = "OTHER";
                    break;
            }
            invoiceData[11] = "";//paymentDATE
            invoiceData[12] = "";//cashAccountingIndicator
            invoiceData[13] = "PAPER";//invoiceAppearance others: ELECTRONIC,EDI,UNKNOWN
            invoiceData[14] = "";//electronicInvoiceHash
        
        String [][] additionalInvoiceData = new String[1][3];
            additionalInvoiceData[0][0] = "";
            additionalInvoiceData[0][1] = "";
            additionalInvoiceData[0][2] = "";
        
        double totalVatValue = 0;
        String [][] lines = new String[termekek.length][56];
        String [][] lineProductFeeCONTENT = new String[termekek.length][6];
             
            int lastProduct = Functions.GetLastProduct(originalInvoiceNumber);
        
            for(int i = 0; i < termekek.length; i++)
            {
                String lineNumberReference = "";
                if(!operation.equals("CREATE"))
                {       
                    if(!termekek[i][12].toString().equals("0"))
                    {
                        lineNumberReference = SearchForLineNumberRef(originalInvoiceNumber, termekek[i][12].toString());
                        System.err.println("Módosított LineNumberReference : " + lineNumberReference);
                    }
                    else
                    {
                        lastProduct++;
                        lineNumberReference = String.valueOf(lastProduct);
                        System.err.println("Új LineNumberReference : " + lineNumberReference);
                    }
                    
                    lines[i][0] = lineNumberReference;//lineNumberReference
                    if(termekek[i][12].toString().equals("0"))
                    {
                        lines[i][1] = "CREATE";//lineOperation
                    }
                    else
                    {
                        lines[i][1] = "MODIFY";//lineOperation
                    }    
                }
                else
                {
                    lines[i][0] = "";//lineNumberReference
                    lines[i][1] = "";//lineOperation
                }
                System.err.println("OPERATION:" + lines[i][1]);
                lines[i][2] = "";//referencesToOtherLines
                lines[i][3] = "";//advanceIndicator
                lines[i][4] = "";//productCodes
                lines[i][5] = termekek[i][1].toString();//lineDescription
                lines[i][6] = termekek[i][3].toString();//quantity
                lines[i][7] = termekek[i][4].toString();//unitOfMeasure
                lines[i][8] = termekek[i][5].toString();//unitPrice
                lines[i][9] = "";//discountDescription
                lines[i][10] = "";//discountValue
                lines[i][11] = "";//discountRate
                double lineVatRate = Double.valueOf(termekek[i][6].toString()) * Double.valueOf(termekek[i][7].toString())/100;//VATamount
                boolean deviza = false;
                switch(select[0][33].toString())
                {
                    case "0":
                        deviza = false;
                        break;
                    case "1":
                        deviza = true;
                        break;
                }
                //lines[i][12] = String.format(java.util.Locale.US, "%.2f", (deviza ? Math.round(lineVatRate * 100.0) / 100.0 : Math.round(lineVatRate * 100.0) / 100.0));
                lines[i][12] = termekek[i][6].toString();
                System.out.println("lines[i][12]: " + lines[i][12]);
                lines[i][14] = "";
                lines[i][15] = "";
                lines[i][16] = "";
                lines[i][17] = "";
                lines[i][18] = "";
                lines[i][19] = "";
                switch(termekek[i][11].toString())
                {
                    case "5%":
                        lines[i][13] = "vatPercentage";//lineVatRate
                        lines[i][14] = String.valueOf(0.05);
                        break;
                    case "10%":
                        lines[i][13] = "vatPercentage";//lineVatRate
                        lines[i][14] = String.valueOf(0.1);
                        break;
                    case "27%":
                        lines[i][13] = "vatPercentage";//lineVatRate
                        lines[i][14] = String.valueOf(0.27);
                        break;
                    case "AAM":
                        lines[i][13] = "vatExemption";//lineVatRate
                        lines[i][15] = String.valueOf(0.0);
                        break;
                    case "Az Áfa törvény hatályán kívüli":
                        lines[i][13] = "vatOutOfScope";//lineVatRate
                        lines[i][16] = String.valueOf("true");
                        break;
                    case "Belföldi fordított adózás":
                        lines[i][13] = "VatDomesticReverseCharge";//lineVatRate
                        lines[i][17] = String.valueOf("true");
                        break;
                    case "Áthárított adót tartalmazó különbözet szerinti adózás":
                        lines[i][13] = "marginSchemeVat";//lineVatRate
                        lines[i][18] = String.valueOf("true");
                        break;
                    case "Áthárított adót nem tartalmazó különbözet szerinti adózás":
                        lines[i][13] = "marginSchemeNoVat";//lineVatRate
                        lines[i][19] = String.valueOf("true");
                        break;
                }
                double lineVatAmount = Double.valueOf(termekek[i][6].toString()) * Double.valueOf(termekek[i][7].toString())/100;
                lines[i][20] = String.format(java.util.Locale.US, "%.2f", lineVatAmount); //Áfa értéke
                System.err.println("lines[i][20] Áfa DEVIZA: " + lines[i][20]);
                double lineVatAmountHUF = lineVatAmount * Double.valueOf(invoiceData[8]);
                lines[i][21] = String.format(java.util.Locale.US, "%.2f", lineVatAmountHUF); //Áfa értéke HUF-ban
                System.err.println("lines[i][21] ÁFA HUF: " + lines[i][21]);
                totalVatValue += lineVatAmountHUF;
                //System.err.println("totalVatValue += lineVatAmountHUF : " + totalVatValue);
                lines[i][22] = String.format(java.util.Locale.US, "%.2f", Double.valueOf(termekek[i][6].toString())+lineVatAmount); //Bruttó
                System.err.println("lines[i][22] bruttó: " + lines[i][22]);
                lines[i][23] = "";//intermediatedService
                lines[i][24] = "";//lineExchangeRATE
                lines[i][25] = "";//lineDeliveryDATE

                lines[i][26] = "";//brand
                lines[i][27] = "";//serialNum
                lines[i][28] = "";//engineNum
                lines[i][29] = "";//firstEntryIntoService
                lines[i][30] = "";//transportMean
                    lines[i][31] = "";//engineCapacity
                    lines[i][32] = "";//enginePower
                    lines[i][33] = "";//kms

                    lines[i][34] = "";//lenght
                    lines[i][35] = "";//activityReferred
                    lines[i][36] = "";//sailedHours

                    lines[i][37] = "";//takeOffWeight
                    lines[i][38] = "";//airCargo
                    lines[i][39] = "";//operationHOURS
                lines[i][40] = "false";//depositIndicator
                lines[i][41] = ""; //TRAVEL_AGENCY, SECOND_HAND, ARTWORK, ANTIQUES marginSchemeIndicator
                lines[i][42] = ""; //ekaerIds
                lines[i][43] = ""; //obligatedForProductFEE
                lines[i][44] = ""; //GPCEXCISE
                lines[i][45] = ""; //purchaseCountryCODE
                lines[i][46] = ""; //purchaseREGION
                lines[i][47] = ""; //purchasePostalCODE
                lines[i][48] = ""; //purchaseCITY
                lines[i][49] = ""; //additionalAddressDETAIL
                lines[i][50] = ""; //purchaseDATE
                lines[i][51] = ""; //vehicleRegistrationNUMBER
                lines[i][52] = ""; //dieselOilQUANTITY
                lines[i][53] = ""; //netaDECLARATION

                lines[i][54] = ""; //takeoverREASON
                lines[i][55] = ""; //takeoverAMOUNT
                
                lineProductFeeCONTENT[i][0] = "";
                lineProductFeeCONTENT[i][1] = "";
                lineProductFeeCONTENT[i][2] = "";
                lineProductFeeCONTENT[i][3] = "";
                lineProductFeeCONTENT[i][4] = "";
                lineProductFeeCONTENT[i][5] = "";
            }      
            
        String [][] additionalLineDATA = new String[termekek.length][3];
            for(int j = 0; j < termekek.length; j++)
            {           
                additionalLineDATA[j][0] = ""; //dataNAME
                additionalLineDATA[j][1] = ""; //dataDESCRIPTION
                additionalLineDATA[j][2] = ""; //dataVALUE
            }
        
        InvoiceAllData[0] = referenceDatas;
        InvoiceAllData[1] = supplierInfo;
        InvoiceAllData[2] = customerInfo;
        InvoiceAllData[3] = fiscalRepresentativeInfo;
        InvoiceAllData[4] = invoiceData;
        InvoiceAllData[5] = additionalInvoiceData;
        InvoiceAllData[6] = lines;
        InvoiceAllData[7] = lineProductFeeCONTENT;
        InvoiceAllData[8] = additionalLineDATA;
        
        //A számla elküldése a NAV részére (Tomy)
        
/*        Label szallitolabel = (Label) szallitoComboBox.getSelectedItem();
        query = new Query.QueryBuilder()
                .select("vatLimit")
                .from("szamlazo_ceg_adatok")
                .where("id LIKE '" + szallitolabel.getId() + "'")
                .build();
        Object [][] select = App.db.select(query.getQuery());       
        */

 /*       if(this.szamlaType == szamlaType.STORNO)
        {
            totalVatValue *= -1;
        }*/
        GenerateInvoiceXMLs generate = new GenerateInvoiceXMLs();

        GenerateXml gen = new GenerateXml();   
        
        String xmlToUpload = "";
        
        int tipus = Integer.valueOf(select[0][9].toString());
        SzamlaType InvoiceType = SzamlaType.values()[tipus];
            
       /* System.err.println("szamlaType.equals(select[0][9].toString())" + select[0][9].toString());
        szamlaType = (SzamlaType) select[0][9];
        System.err.println("szamlaType :" + szamlaType);*/
        try
        {
            xmlToUpload = generate.generateSzamlaXml(InvoiceAllData, InvoiceType.toString());

        }
        catch (Exception ex)
        {
            ex.printStackTrace();
        }

        String queryResponse = "";
        String [] file = null;
        try
        {
            query = new Query.QueryBuilder()
                    .select("requestVersion, headerVersion, softwareMainVersion, softwareId, softwareName, softwareOperation, softwareDevName, softwareDevContact, softwareDevCountryCode, softwareTaxNumber")
                    .from("szamlazo_szoftver_adatok")
                    .where("1")
                    .build();
            Object [][] softwareDataResponse = App.db.select(query.getQuery());

            billingSoftwareDatas[0] = softwareDataResponse[0][0].toString();
            billingSoftwareDatas[1] = softwareDataResponse[0][1].toString();
            billingSoftwareDatas[2] = softwareDataResponse[0][2].toString();
            billingSoftwareDatas[3] = softwareDataResponse[0][3].toString();
            billingSoftwareDatas[4] = softwareDataResponse[0][4].toString();
            billingSoftwareDatas[5] = softwareDataResponse[0][5].toString();
            billingSoftwareDatas[6] = softwareDataResponse[0][6].toString();
            billingSoftwareDatas[7] = softwareDataResponse[0][7].toString();
            billingSoftwareDatas[8] = softwareDataResponse[0][8].toString();
            billingSoftwareDatas[9] = softwareDataResponse[0][9].toString();

            query = new Query.QueryBuilder()
                    .select("felhasznalonev, password, alairo_kulcs, csere_kulcs")
                    .from("szamlazo_ceg_adatok")
                    .where("nev LIKE '" + supplierInfo[7] + "'")
                    .build();
            Object [][] supplierDataResponse = App.db.select(query.getQuery());

            SupplierDatas[0] = supplierInfo[0];
            SupplierDatas[1] = supplierDataResponse[0][0].toString();
            SupplierDatas[2] = supplierDataResponse[0][1].toString();
            SupplierDatas[3] = supplierDataResponse[0][2].toString();
            SupplierDatas[4] = supplierDataResponse[0][3].toString();
            
            file = gen.GenerateQueryInvoiceStatusXml(billingSoftwareDatas, SupplierDatas, xmlToUpload, InvoiceType.toString()).split(";");       
            NAVConn conn = new NAVConn();
            String uri = "queryInvoiceStatus";

            queryResponse = conn.GetStatus(uri, file[0]);
        }
        catch(Exception ex)
        {
            ex.printStackTrace();
        }
        String status = "";

        try
        {
            status = queryResponse.split("<invoiceStatus>")[1].split("</invoiceStatus>")[0];
        }
        catch(NullPointerException ex)
        {
            //szamlaMentes();
            System.err.println("Invoice status hiba");
        }

        Object[] szamlaObject = new Object[3];
        
        switch(status)
        {
            case "RECEIVED":
                szamlaObject[0] = "1";
                break;
            case "PROCESSING":
                szamlaObject[0] = "2";
                break;
            case "DONE":
                szamlaObject[0] = "3";
                break;
            case "ABORTED":
                szamlaObject[0] = "4";
                break;
            default:
                szamlaObject[0] = "0";
                break;
        }
        szamlaObject[1] = file[1];
        szamlaObject[2] = select[0][0].toString();
        //Számla elküldve A NAV részére(Tomy)
        
        App.db.insert("UPDATE szamlazo_szamla SET NAVStatus = ?, transactionID = ? WHERE szamla_sorszam = ?", szamlaObject, szamlaObject.length);    
    }//GEN-LAST:event_reSendMenuItemActionPerformed

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton DetailedSearchButton;
    private javax.swing.JButton DetailedSearchToDefaultButton;
    private javax.swing.JComboBox EasySearchComboBox;
    private javax.swing.JLabel ReszletesKereses;
    private javax.swing.JCheckBox atutalasCheckBox;
    private javax.swing.JMenuItem csvKeszitesEgyszeruMenuItem;
    private javax.swing.JMenuItem csvKeszitesReszletesMenuItem;
    private javax.swing.JTextField esedekessegIg;
    private javax.swing.JLabel esedekessegIgCal;
    private javax.swing.JTextField esedekessegTol;
    private javax.swing.JLabel esedekessegTolCal;
    private javax.swing.JCheckBox helyesbitett;
    private javax.swing.JCheckBox helyesbito;
    private javax.swing.JMenuItem helyesbitoMenuItem;
    private javax.swing.JLabel jLabel10;
    private javax.swing.JLabel jLabel12;
    private javax.swing.JLabel jLabel14;
    private javax.swing.JLabel jLabel16;
    private javax.swing.JLabel jLabel18;
    private javax.swing.JLabel jLabel20;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JLabel jLabel7;
    private javax.swing.JLabel jLabel9;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel10;
    private javax.swing.JPanel jPanel11;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JPanel jPanel3;
    private javax.swing.JPanel jPanel4;
    private javax.swing.JPanel jPanel5;
    private javax.swing.JPanel jPanel7;
    private javax.swing.JPanel jPanel8;
    private javax.swing.JPanel jPanel9;
    private javax.swing.JPopupMenu.Separator jSeparator1;
    private javax.swing.JPopupMenu.Separator jSeparator2;
    private javax.swing.JPopupMenu.Separator jSeparator3;
    private javax.swing.JPopupMenu.Separator jSeparator4;
    private javax.swing.JTextField keltIg;
    private javax.swing.JLabel keltIgCal;
    private javax.swing.JTextField keltTol;
    private javax.swing.JLabel keltTolCal;
    private javax.swing.JTextField kereses;
    private javax.swing.JCheckBox keszpenzCheckBox;
    private javax.swing.JTextField kifizetesIg;
    private javax.swing.JLabel kifizetesIgCal;
    private javax.swing.JMenuItem kifizetesMenuItem;
    private javax.swing.JTextField kifizetesTol;
    private javax.swing.JLabel kifizetesTolCal;
    private javax.swing.JMenuItem kijeloltekTermekdijKimutatas;
    private javax.swing.JCheckBox kintlevosegCheckBoxInAdvancedSearch;
    private javax.swing.JMenuItem kintlevosegLevelEmailMenuItem;
    private javax.swing.JMenuItem kintlevosegLevelPDFMenuItem;
    private javax.swing.JMenuItem masolatMenuItem;
    private javax.swing.JMenuItem modositoMenuItem;
    private javax.swing.JCheckBox nemNyomtatottCheckBox;
    private javax.swing.JCheckBox normal;
    private javax.swing.JDialog nyomtatasDialog;
    private javax.swing.JLabel nyomtatasLabel;
    private javax.swing.JMenuItem nyomtatasMenuItem;
    private javax.swing.JTextField nyomtatasPeldany;
    private javax.swing.JMenuItem pdfKeszitesMenuItem;
    private javax.swing.JMenuItem reSendMenuItem;
    private javax.swing.JDialog reszletesKeresesDialog;
    private javax.swing.JComboBox sorszamozas;
    private javax.swing.JMenuItem statusRefreshMenuItem;
    private javax.swing.JMenuItem stornoMenuItem;
    private javax.swing.JScrollPane sumScrollPane;
    private javax.swing.JTable sumTable;
    private javax.swing.JPopupMenu szamlaPopupMenu;
    private javax.swing.JScrollPane szamlaScrollPane;
    private javax.swing.JTable szamlakTable;
    private javax.swing.JTextField teljesitesIg;
    private javax.swing.JLabel teljesitesIgCal;
    private javax.swing.JMenuItem teljesitesIgazolasNyomtatasaMenuItem;
    private javax.swing.JTextField teljesitesTol;
    private javax.swing.JLabel teljesitesTolCal;
    private javax.swing.JCheckBox utanvetCheckBox;
    // End of variables declaration//GEN-END:variables

    private void init()
    {
        //System.out.println("szamlak frame init: " + TimeStamp.getTimeStamp().toString());
        Toolkit toolkit = Toolkit.getDefaultToolkit();
        Dimension screenSize = toolkit.getScreenSize();
        int x = (screenSize.width - getWidth()) / 2;
        int y = (screenSize.height - getHeight()) / 2;

        java.net.URL url = ClassLoader.getSystemResource("cezeszamlazo/resources/print_20.png");
        java.awt.Image img = toolkit.createImage(url);

        nyomtatasDialog.setSize(nyomtatasDialog.getPreferredSize().width, nyomtatasDialog.getPreferredSize().height + 35);
        nyomtatasDialog.setIconImage(img);

        reszletesKeresesDialog.setSize(reszletesKeresesDialog.getPreferredSize().width + 35, reszletesKeresesDialog.getPreferredSize().height + 35);
        reszletesKeresesDialog.setIconImage(img);

        url = ClassLoader.getSystemResource("cezeszamlazo/resources/szamlak.png");
        img = toolkit.createImage(url);

        setIconImage(img);
        setLocation(x, y);
        setTitle("Számlák");

        sorszamozasFrissites();

        szamlaScrollPane.getHorizontalScrollBar().addAdjustmentListener(new ScrollAdjustmentListener(sumScrollPane));
        sumScrollPane.getHorizontalScrollBar().addAdjustmentListener(new ScrollAdjustmentListener(szamlaScrollPane));

//        ActionListener actionListener1 = new ActionListener() {
//            @Override
//            public void actionPerformed(ActionEvent actionEvent) {
//                JCheckBox checkbox = (JCheckBox) actionEvent.getSource();
////                AbstractButton abstractButton = (AbstractButton) actionEvent.getSource();
//                boolean selected = checkbox.getModel().isSelected();
//                kintlevosegCheckBox.setSelected(selected);
//
//            }
//        };
//        ActionListener actionListener2 = new ActionListener() {
//            @Override
//            public void actionPerformed(ActionEvent actionEvent) {
//                JCheckBox checkbox = (JCheckBox) actionEvent.getSource();
////                AbstractButton abstractButton = (AbstractButton) actionEvent.getSource();
//                boolean selected = checkbox.getModel().isSelected();
////                System.out.println("NORMAL: " + selected);
//
//                kintlevosegCheckBoxInAdvancedSearch.setSelected(selected);
//
//            }
//        };
//        kintlevosegCheckBox.addItemListener(new ItemListener() {
//            @Override
//            public void itemStateChanged(ItemEvent e) {
//
//                if (e.getStateChange() == ItemEvent.SELECTED) {//checkbox has been selected
//                    kintlevosegCheckBoxInAdvancedSearch.setSelected(true);
//                } else {//checkbox has been deselected
//                    kintlevosegCheckBoxInAdvancedSearch.setSelected(false);
//                };
//                kintlevosegCheckBox.setSelected(false);
//            }
//        });
//
//        kintlevosegCheckBoxInAdvancedSearch.addItemListener(new ItemListener() {
//            @Override
//            public void itemStateChanged(ItemEvent e) {
//                if (e.getStateChange() == ItemEvent.SELECTED) {//checkbox has been selected
//                    kintlevosegCheckBox.setSelected(true);
//                } else {//checkbox has been deselected
//                    kintlevosegCheckBox.setSelected(false);
//                };
//                kintlevosegCheckBoxInAdvancedSearch.setSelected(false);
//            }
//        });
//        
//        ButtonGroup group = new ButtonGroup();
//        group.add(kintlevosegCheckBox);
//        group.add(kintlevosegCheckBoxInAdvancedSearch);
//        kintlevosegCheckBoxInAdvancedSearch.addActionListener(actionListener1);
//        kintlevosegCheckBox.addActionListener(actionListener2);
        kintlevosegCheckBoxInAdvancedSearch.setVisible(true);

        kintlevosegLevelEmailMenuItem.setVisible(true);
        kintlevosegLevelPDFMenuItem.setVisible(true);
    }

    private void sorszamozasFrissites()
    {
        //System.out.println("sorszamozás frissítés kezdete: " + TimeStamp.getTimeStamp());
        b = false;
        sorszamozas.removeAllItems();
        String whereString = "";
        String[] temp = App.user.getCeg().split(";");
        for (int i = 0; i < temp.length; i++)
        {
            whereString += "id = " + temp[i] + " || ";
        }
        whereString += "0";
        Query query = new Query.QueryBuilder()
                .select("sorszamid")
                .from("szamlazo_ceg_adatok")
                .where(whereString)
                .build();
        Object[][] select = App.db.select(query.getQuery());
        whereString = "";
        for (Object[] obj : select)
        {
            whereString += "id = " + obj[0] + " || ";
        }
        whereString += "0";
        query = new Query.QueryBuilder()
                .select("id, megnevezes")
                .from("szamlazo_szamla_sorszam")
                .where(whereString)
                .order("id")
                .build();
        Object[][] object = App.db.select(query.getQuery());
        for (Object[] obj : object)
        {
            sorszamozas.addItem(new Label(String.valueOf(obj[0]), String.valueOf(obj[1])));
        }
        b = true;
        
        // sorszámok lekérdezésnek a kezdete
        
        int id = App.user.getId();
        query = new Query.QueryBuilder()
                .select("alapertelmezett_ceg")
                .from("szamlazo_users")
                .where("id = " + id)
                .build();
        select = App.db.select(query.getQuery());
        String DefaultCompany = select[0][0].toString();
        
        query = new Query.QueryBuilder()
                .select("sorszamid")
                .from("szamlazo_ceg_adatok")
                .where("id = " + DefaultCompany)
                .build();
        select = App.db.select(query.getQuery());
        String szamlazo_ceg_adatok_Sorszamid = select[0][0].toString();
        
        query = new Query.QueryBuilder()
                .select("id, megnevezes")
                .from("szamlazo_szamla_sorszam")
                .where("id = " + szamlazo_ceg_adatok_Sorszamid)
                .build();
        select = App.db.select(query.getQuery());
        String szamlazoSzamlaSorszam_Id = select[0][0].toString();
        String szamlazoSzamlaSorszam_Megnevezes = select[0][1].toString();

        Object DefaultSerial = null;
        
        for(int i = 0; i < sorszamozas.getItemCount(); i++)
        {
            Object item = sorszamozas.getItemAt(i);
            if(item.toString().equals(szamlazoSzamlaSorszam_Megnevezes))
            {
                DefaultSerial = item;
            }
        }
        sorszamozas.setSelectedItem(DefaultSerial);
        
        // sorszámok lekérdezésnek a vége
        
    }
    
    public String findOriginalInvoiceNumber(String invoiceNumber)
    {
        String originalInvoiceNumber = "";
        
        Query query = new Query.QueryBuilder()
                .select("szamla_sorszam, helyesbitett")
                .from("szamlazo_szamla")
                .where("szamla_sorszam LIKE '" + invoiceNumber + "'")
                .build();
        Object [][] select = App.db.select(query.getQuery());
        
        if(select[0][1].toString().equals(""))
        {
            originalInvoiceNumber = select[0][0].toString();
        }
        else
        {
            originalInvoiceNumber = findOriginalInvoiceNumber(select[0][1].toString());
        }
        
        return originalInvoiceNumber;
    }
    
    public String findLastModificationReference(String originalInvoiceNumber, String actualInvoiceNumber)
    {
        String lastModificationReference = "";
        Query query = new Query.QueryBuilder()
                .select("id, szamla_sorszam")
                .from("szamlazo_szamla")
                .where("helyesbitett LIKE '" + originalInvoiceNumber + "'")
                .order("id DESC")
                .build();
        Object[][] select = App.db.select(query.getQuery());       
        
        try
        {
            if (!actualInvoiceNumber.equals(lastModificationReference))
            {
                lastModificationReference = select[0][1].toString();
            }
            else
            {
                lastModificationReference = "";
            }
        }
        catch(ArrayIndexOutOfBoundsException e)
        {
            lastModificationReference = "";
        }
        
        return lastModificationReference;
    }
    
    public String SearchForLineNumberRef(String originalInvoiceNumber, String modifiedproductID)
    {
        ArrayList<String[]> products = new ArrayList<>();
        String lineNumberReference = "";
        
        Query query = new Query.QueryBuilder()
                .select("id")
                .from("szamlazo_szamla_adatok")
                .where("szamla_sorszam LIKE '" + originalInvoiceNumber + "'")
                .build();
        Object [][] szamlazo_szamla_original = App.db.select(query.getQuery());
        for(int i = 0; i < szamlazo_szamla_original.length; i++)
        {      
            String [] product = {String.valueOf(i+1), szamlazo_szamla_original[i][0].toString()};
            products.add(product);
        }
        
        query = new Query.QueryBuilder()
                .select("id, szamla_sorszam")
                .from("szamlazo_szamla")
                .where("helyesbitett LIKE '" + originalInvoiceNumber + "'")
                .order("id ASC")
                .build();
        Object [][] szamlazo_szamla = App.db.select(query.getQuery());
        
        for(Object [] obj: szamlazo_szamla)
        {
            query = new Query.QueryBuilder()
                .select("id, modifiedproductID")
                .from("szamlazo_szamla_adatok")
                .where("szamla_sorszam LIKE '" + obj[1] + "'")
                .order("id ASC")
                .build();
            Object [][] select = App.db.select(query.getQuery());
            
            for(Object [] obj2 : select)
            {
                if(obj2[1].equals("0"))
                {
                    String [] product = {String.valueOf(products.size()), obj2[0].toString()};
                    products.add(product);
                }                
            }
        }
        
        for(int i = 0; i < products.size(); i++)
        {
            if(products.get(i)[1].equals(modifiedproductID))
            {
                lineNumberReference = String.valueOf(i+1);
            }
        }
        
        return lineNumberReference;
    }
    
   /* private int GetLastProduct(String originalInvoiceNumber)
    {
        int lastProduct = 0;
        Query query = new Query.QueryBuilder()
                .select("id")
                .from("szamlazo_szamla_adatok")
                .where("szamla_sorszam LIKE '" + originalInvoiceNumber + "'")
                .build();
        Object [][] original = App.db.select(query.getQuery());
        
        for(int i = 0; i < original.length; i++)
        {      
            lastProduct++;
        }
        System.err.println("Az eredeti számla " + lastProduct + " termékből áll.");
        
        query = new Query.QueryBuilder()
                .select("id, szamla_sorszam")
                .from("szamlazo_szamla")
                .where("helyesbitett LIKE '" + originalInvoiceNumber + "'")
                .order("id ASC")
                .build();
        Object [][] modify = App.db.select(query.getQuery());
        
        for(Object [] obj: modify)
        {
            query = new Query.QueryBuilder()
                .select("id, modifiedproductID")
                .from("szamlazo_szamla_adatok")
                .where("szamla_sorszam LIKE '" + obj[1] + "'")
                .order("id ASC")
                .build();
            Object [][] select = App.db.select(query.getQuery());
            
            for(Object [] obj2 : select)
            {
                if(obj2[1].equals("0"))
                {
                    lastProduct++;
                }                
            }
        }
        
        System.err.println("A módosító számlával " + lastProduct + " termék lett.");
                
        return lastProduct;
    }*/

    public void frissites()
    {
        keres = "1";
        Label selectedLabel = (Label) sorszamozas.getSelectedItem();
        String k = EncodeDecode.encode(kereses.getText().replace("'", "\\\'"));
        keres += " && (sz.szamla_sorszam LIKE '%" + k + "%' || sz.nev LIKE '%" + k + "%')";
        if (nemNyomtatottCheckBox.isSelected())
        {
            keres += " && sz.nyomtatva = 0";
        }
        keres += " && (0";

      //if (kintlevosegCheckBoxInAdvancedSearch.isSelected())
      //{
      //    keres += " || sz.tipus = 0";
      //}

        if (kintlevosegCheckBoxInAdvancedSearch.isSelected())
        {
            keres += " || sz.tipus = 0";
        }
        if (normal.isSelected())
        {
            keres += " || sz.tipus = 1";
        }

        if (helyesbito.isSelected())
        {
            keres += " || sz.tipus = 2";
        }
        if (helyesbitett.isSelected())
        {
            keres += " || sz.tipus = 3";
        }

        if (!checkIfNothingSelected())
        {
            keres += " || sz.tipus = 0";
            keres += " || sz.tipus = 1";
            keres += " || sz.tipus = 2";
            keres += " || sz.tipus = 3";
        }
        keres += ")";
        keres += "&& (0";
        if (keszpenzCheckBox.isSelected())
        {
            keres += " || sz.fizetesi_mod = 0";
        }
        if (atutalasCheckBox.isSelected())
        {
            keres += " || sz.fizetesi_mod = 1";
        }
        if (utanvetCheckBox.isSelected())
        {
            keres += " || sz.fizetesi_mod = 2";
        }
        keres += ")";
        if (!keltTol.getText().isEmpty() || !keltIg.getText().isEmpty())
        {
            keres += " && sz.kelt BETWEEN '" + (keltTol.getText().isEmpty() ? "0000-00-00" : keltTol.getText()) + "' AND " + (keltIg.getText().isEmpty() ? "NOW()" : "'" + keltIg.getText() + "'");
        }
        if (!teljesitesTol.getText().isEmpty() || !teljesitesIg.getText().isEmpty())
        {
            keres += " && sz.teljesites BETWEEN '" + (teljesitesTol.getText().isEmpty() ? "0000-00-00" : teljesitesTol.getText()) + "' AND " + (teljesitesIg.getText().isEmpty() ? "NOW()" : "'" + teljesitesIg.getText() + "'");
        }
        if (!esedekessegTol.getText().isEmpty() || !esedekessegIg.getText().isEmpty())
        {
            keres += " && sz.esedekesseg BETWEEN '" + (esedekessegTol.getText().isEmpty() ? "0000-00-00" : esedekessegTol.getText()) + "' AND " + (esedekessegIg.getText().isEmpty() ? "NOW()" : "'" + esedekessegIg.getText() + "'");
        }
        if (!kifizetesTol.getText().isEmpty() || !kifizetesIg.getText().isEmpty())
        {
            keres += " && sz.kifizetes BETWEEN '" + (kifizetesTol.getText().isEmpty() ? "0000-00-00" : kifizetesTol.getText()) + "' AND " + (kifizetesIg.getText().isEmpty() ? "NOW()" : "'" + kifizetesIg.getText() + "'");
        }
        
        DateFormat dateFormat = new SimpleDateFormat("yyyy-MM-dd");
        String date = dateFormat.format(new Date());
        String where = "";
        
        DefaultTableModel model = (DefaultTableModel) szamlakTable.getModel();
        String[] header = {"Sorszám", "Vevő", "Kelt", "Nettó", "Áfaérték",
            "Bruttó", "Fizetendő", "Fennmaradó", "Esedékesség",
            "Teljesítés", "Kifizetés", "Késedelem", "Becsült kamat",
            "Fizetési mód", "Megjegyzés", "Csoport", "Valuta",
            "Középárfolyam", "Azonosító",
            "Teljesites igazolas sorszama", "Teljesítés Igazolás kelte","NavStátusz"};

        switch(EasySearchComboBox.getSelectedItem().toString())
        {
            case "Összes":
                where = "sorszamozasid = " + selectedLabel.getId();
                break;
            case "Kintlévőség":
                where = "sorszamozasid = " + selectedLabel.getId() + " AND kifizetes = '0000-00-00'";
                break;
            case "Határidőn túli kintlévőség":
                where = "sorszamozasid = " + selectedLabel.getId() + " AND kifizetes = '0000-00-00' AND `esedekesseg` < '" + date + "'";
                break;
        }
        
        Query query = new Query.QueryBuilder()
                .select("sz.szamla_sorszam, " // Sorszám
                        + "sz.nev, " // Vevő
                        + "sz.kelt, " // Kelt
                        + "sz.netto, " // Nettó
                        + "sz.afa_ertek, " // Áfaérték
                        + "sz.netto + sz.afa_ertek, " // Bruttó
                        + "sz.netto + sz.afa_ertek, " // Fizetendő
                        + "sz.netto + sz.afa_ertek - (SELECT IF(SUM(osszeg) IS NULL, 0, SUM(osszeg)) from szamlazo_szamla_kifizetesek WHERE szamla_sorszam = sz.szamla_sorszam && azon = sz.azon), " // Fennmaradó
                        + "sz.esedekesseg, " // Esedékesség
                        + "sz.teljesites, " // Teljesítés
                        + "IF(sz.kifizetes = '0000-00-00', '', sz.kifizetes), " // Kifizetés
                        + "CONCAT(IF(sz.kifizetes = '0000-00-00', IF(DATEDIFF(NOW(), sz.esedekesseg) < 0, 0, DATEDIFF(NOW(), sz.esedekesseg)), DATEDIFF(sz.kifizetes, sz.esedekesseg)), ' nap'), " // Késedelem
                        + "(sz.netto + sz.afa_ertek) * (SELECT alapkamat from szamlazo_jegybanki_alapkamat) / 100 * 2 / 365 * IF(sz.kifizetes = '0000-00-00', IF(DATEDIFF(NOW(), sz.esedekesseg) < 0, 0, DATEDIFF(NOW(), sz.esedekesseg)), DATEDIFF(sz.kifizetes, sz.esedekesseg)), " // Becsült kamat
                        + "sz.fizetesi_mod, " // Fizetési mód
                        + "sz.tipus, " // Megjegyzés
                        + "IF(sz.szamla_csoport = 0, 'nincs', (SELECT cs.nev from szamlazo_szamla_csoportok cs WHERE cs.id = sz.szamla_csoport)), " // Csoport
                        + "sz.valuta, " // Valuta
                        + "sz.kozeparfolyam, " // Középárfolyam
                        + "sz.azon, " // Azonosító
                        + " (SELECT szti.tig_sorszam FROM szamlazo_teljesites_igazolas AS szti WHERE szti.szamla_sorszam = sz.szamla_sorszam), "
                        + " (SELECT szti.teljesites_igazolas_kelte  FROM szamlazo_teljesites_igazolas AS szti WHERE szti.szamla_sorszam = sz.szamla_sorszam) "
                        + ",sz.NAVStatus")//NavStátusz
                .from("szamlazo_szamla sz ")
                .where(keres + " AND " + where)
                .order(" sz.kelt DESC, sz.id DESC")
                .build();
        Object[][] result = App.db.select(query.getQuery());// gyorsításán gondolkozni (vagy darabolni és külön szálon háttérben vagy megnézni, hogy hogyan lehetne másképpen)       

        if (result.length != 0)
        {
            for (int i = 0; i < result.length; i++)
            {
                //System.err.println("Fizetési mód: " + String.valueOf(result[i][13]));
                //System.err.println("Valuta: " + String.valueOf(result[i][16]));
                if (Integer.valueOf(String.valueOf(result[i][13])) == 0 && String.valueOf(result[i][16]).equalsIgnoreCase("huf"))
                {
                    boolean isUtalas = false;
                    if (String.valueOf(result[i][13]).equalsIgnoreCase("1"))
                    {
                        isUtalas = true;
                    }
                    result[i][6] = Functions.kerekit(Double.valueOf(String.valueOf(result[i][6])), isUtalas);
                }
                switch(Integer.valueOf(result[i][21].toString()))
                {
                    case 0: result[i][21] = "Beküldetlen";
                        break;
                    case 1: result[i][21] = "Beküldött";
                        break;
                    case 2: result[i][21] = "Feldolgozás alatt";
                        break;
                    case 3: result[i][21] = "Feldolgozott";
                        break;
                    case 4: result[i][21] = "Elutasított";
                        break;
                }
            }
        }

        model.setDataVector(result, header);
        model = (DefaultTableModel) sumTable.getModel();

        model.setColumnIdentifiers(header);
        TableColumn col;
        SzamlaTableCellRender render = new SzamlaTableCellRender();
        int[] meret = {75, 150, 70, 75, 75, 75, 75, 75, 70, 70, 70, 70, 75, 75, 100, 100, 50, 50, 75, 75, 75};
        String width = Settings.get("szamlaTableHeader");
        if (width != null && !width.isEmpty())
        {
            String[] w = width.split(";");
            if (w.length != 0)
            {
                for (int i = 0; i < Math.min(w.length, meret.length); i++)
                {
                    meret[i] = Integer.parseInt(w[i]);
                }
            }
        }
        b = false;

        for (int i = 0; i < 21; i++)
        {
            try
            {
                col = szamlakTable.getColumnModel().getColumn(i);
                col.setCellRenderer(render);
                col.setPreferredWidth(meret[i]);
                col = sumTable.getColumnModel().getColumn(i);
                col.setPreferredWidth(meret[i]);
            }
            catch (Exception ex)
            {
                ex.printStackTrace();
            }
        }
        b = true;

        osszesit();
        firstInitEasyCombobox = true;
    }

    private void osszesit()
    {
        // 3 - 7, 13
        for (int i = 3; i <= 7; i++)
        {
            osszesit(i);
        }
        osszesit(12);
    }

    private void osszesit(int col)
    {
        int o = 0;
        int[] rows = szamlakTable.getSelectedRows();
        if (rows.length == 0)
        {
            for (int i = 0; i < szamlakTable.getRowCount(); i++)
            {
                if (!String.valueOf(szamlakTable.getValueAt(i, 16)).equalsIgnoreCase("huf"))
                {
                    o += (int) Math.round(Double.parseDouble(String.valueOf(szamlakTable.getValueAt(i, col))) * Double.parseDouble(String.valueOf(szamlakTable.getValueAt(i, 17))));
                }
                else
                {
                    o += (int) Math.round(Double.parseDouble(String.valueOf(szamlakTable.getValueAt(i, col))));
                }
            }
        }
        else
        {
            for (int i = 0; i < rows.length; i++)
            {
                if (!String.valueOf(szamlakTable.getValueAt(rows[i], 16)).equalsIgnoreCase("huf"))
                {
                    o += (int) Math.round(Double.parseDouble(String.valueOf(szamlakTable.getValueAt(rows[i], col))) * Double.parseDouble(String.valueOf(szamlakTable.getValueAt(rows[i], 17))));
                }
                else
                {
                    o += (int) Math.round(Double.parseDouble(String.valueOf(szamlakTable.getValueAt(rows[i], col))));
                }
            }
        }
        sumTable.setValueAt(EncodeDecode.numberFormat(String.valueOf(o), false) + " Ft", 0, col);
    }

    public void nyit()
    {
        //System.out.println();frissites()
        setVisible(true);
    }

    private void nyit(Object dialog, String title)
    {
        todaysettofieldsifempty(teljesitesIg);
        todaysettofieldsifempty(keltIg);
        todaysettofieldsifempty(esedekessegIg);
        todaysettofieldsifempty(kifizetesIg);
        
        if (dialog instanceof JDialog) {
            JDialog d = (JDialog) dialog;
            Dimension appSize = getSize();
            Point appLocation = getLocation();
            int x = (appSize.width - d.getWidth()) / 2 + appLocation.x;
            int y = (appSize.height - d.getHeight()) / 2 + appLocation.y;
            d.setLocation(x, y);
            d.setTitle(title);
            d.setVisible(true);
        } else if (dialog instanceof JFrame) {
            JFrame f = (JFrame) dialog;
            Dimension appSize = getSize();
            Point appLocation = getLocation();
            int x = (appSize.width - f.getWidth()) / 2 + appLocation.x;
            int y = (appSize.height - f.getHeight()) / 2 + appLocation.y;
            f.setLocation(x, y);
            f.setTitle(title);
            f.setVisible(true);
        }
    }

    private void todaysettofieldsifempty(JTextField dateField)
    {
        if (dateField.getText().equals(""))
        {
            dateField.setText(TodayDate());
        }
    }
   
    
    private String TodayDate()
    {
        DateTimeFormatter dtf = DateTimeFormatter.ofPattern("yyyy-MM-dd");
        LocalDate localDate = LocalDate.now();
        String todayDate = dtf.format(localDate);
        return todayDate;
    }
    
    private void kintlevosegPDF(String[] azonositok, boolean egybeVagyKulon)
    {
        try
        {
            KintlevosegLevel kintlevosegLevel = KintlevosegLevel.create(KintlevosegLevel.Type.PDF);
            kintlevosegLevel.createPDF(azonositok, egybeVagyKulon);
        }
        catch (KintlevosegLevelException exception)
        {
            HibaDialog h = new HibaDialog("Nincs kintlévőség kiválasztva!", "", "Ok");
        }

    }

    private void kintlevosegLevel(String[] azonositok, boolean egybeVagyKulon)
    {
        try
        {
            KintlevosegLevel kintlevosegLevel = KintlevosegLevel.create(KintlevosegLevel.Type.EMAIL);
            kintlevosegLevel.createEmail(azonositok, egybeVagyKulon);
        }
        catch (KintlevosegLevelException exception)
        {
            HibaDialog h = new HibaDialog("Nincs kintlévőség kiválasztva!", "", "Ok");
        }
    }

    public static void mailTo(String to, String subject, String body, String attachmentFileUrl)
    {
        String parameters = "\"to='" + to + "',subject='" + subject + "',body='" + body.replace("\n", "<br />") + "'\",format=1,";
        String[] fileUrls = attachmentFileUrl.split(";");
        String attachment = "attachment='";
        int count = 0;
        for (int i = 0; i < fileUrls.length; i++)
        {
            attachment += fileUrls[i];
            if (count != fileUrls.length - 1)
            {
                attachment += ",";
            }

            count++;
        }
        attachment += "'";
        attachment = attachment.replaceAll(" ", "");
        parameters += attachment;
        parameters = parameters.replaceAll("<br />", "");
        System.out.println(parameters);
        try
        {
            // thunderbird útvonal!!! TESZT
            Runtime.getRuntime().exec("cmd /c C:\\PROGRA~1\\MOZILL~1\\thunderbird.exe -compose " + parameters);
        }
        catch (Exception ex){}
        try
        {
            // thunderbird útvonal!!!
            Runtime.getRuntime().exec("cmd /c C:\\PROGRA~1\\MOZILL~2\\thunderbird.exe -compose " + parameters);
        }
        catch (Exception ex){}
        try
        {
            Runtime.getRuntime().exec("cmd /c C:\\PROGRA~1\\MOZILL~3\\thunderbird.exe -compose " + parameters);
        }
        catch (Exception ex){}
        try
        {
            Runtime.getRuntime().exec("cmd /c C:\\PROGRA~2\\MOZILL~1\\thunderbird.exe -compose " + parameters);
        } catch (Exception ex){}
        try
        {
            Runtime.getRuntime().exec("cmd /c C:\\PROGRA~2\\MOZILL~2\\thunderbird.exe -compose " + parameters);
        } catch (Exception ex){}
        try
        {
            Runtime.getRuntime().exec("cmd /c C:\\PROGRA~2\\MOZILL~3\\thunderbird.exe -compose " + parameters);
        }
        catch (Exception ex){}
    }

    private void kijeloltCsvKeszitese(File f, boolean reszletes)
    {
        FileOutputStream fos;
        DataOutputStream dos;
        String sep = "\n";
        byte[] data;
        int[] rows = szamlakTable.getSelectedRows();
        String whereText = "";
        for (int i = 0; i < rows.length; i++)
        {
            whereText += "szamla_sorszam = '" + String.valueOf(szamlakTable.getValueAt(rows[i], 0)) + "' || ";
        }
        whereText += "0";
        Query query = new Query.QueryBuilder()
                .select("nev, " // 0
                        + "CONCAT(szamla_sorszam, IF(deviza = 1, '/V', '')), " // 1
                        + "kelt, " // 2
                        + "netto, " // 3
                        + "afa_ertek, " // 4
                        + "netto + afa_ertek, " // 5
                        + "teljesites, " // 6
                        + "fizetesi_mod, " // 7
                        + "valuta, " // 8
                        + "kozeparfolyam, " // 9
                        + "azon, " // 10
                        + "atvallal, " // 11
                        + "deviza ") // 11)
                .from("szamlazo_szamla")
                .where(whereText)
                .order("kelt ASC, id ASC")
                .build();
        Object[][] s = App.db.select(query.getQuery());
        try
        {
            fos = new FileOutputStream(f);
            dos = new DataOutputStream(fos);

            String[] header = {"Számla sorszám", "Vevő", "Kelt", "Nettó", "Áfaérték", "Bruttó", "Teljesítés", "Fizetési mód", "Valuta", "Középárfolyam"};
            for (int i = 0; i < header.length; i++)
            {
                String fejlec = "\"" + header[i] + "\";";
                data = fejlec.getBytes("UTF-8");
                dos.write(data);
            }
            dos.writeChars(sep);
            for (int i = 0; i < s.length; i++)
            {
                String sor = "\"" + String.valueOf(s[i][1]) + "\";\"" + String.valueOf(s[i][0]) + "\";\"" + String.valueOf(s[i][2]) + "\";" + String.valueOf(s[i][3]).replace(".", ",") + ";"
                        + String.valueOf(s[i][4]).replace(".", ",") + ";" + String.valueOf(s[i][5]).replace(".", ",") + ";\"" + String.valueOf(s[i][6]) + "\";\"" + (String.valueOf(s[i][7]).matches("0") ? "készpénz" : "átutalás") + "\";"
                        + "\"" + String.valueOf(s[i][8]) + "\";" + String.valueOf(s[i][9]).replace(".", ",");
                data = sor.getBytes("UTF-8");
                dos.write(data);
                dos.writeChars(sep);

                if (reszletes)
                {
                    dos.writeChars(sep);
                    header = new String[]{"", "Termek", "VTSZ/TESZOR", "Mennyiseg", "Mee.", "Egységár", "Nettó ár", "ÁFA", "Áfa érték", "Bruttó ár"};
                    for (int j = 0; j < header.length; j++)
                    {
                        String fejlec = "\"" + header[j] + "\";";
                        data = fejlec.getBytes("UTF-8");
                        dos.write(data);
                    }

                    dos.writeChars(sep);
                    query = new Query.QueryBuilder()
                            .select("termek, " // 0
                                    + "vtsz_teszor, " // 1
                                    + "mennyiseg, " // 2
                                    + "mennyisegi_egyseg, " // 3
                                    + "egysegar, " // 4
                                    + "netto_ar, " // 5
                                    + "afa," // 6
                                    + "IF(" + String.valueOf(s[i][12]) + ", ROUND(netto_ar * afa) / 100.0, ROUND(netto_ar * afa / 100.0)), " // 7
                                    + "IF(" + String.valueOf(s[i][12]) + ", ROUND(netto_ar * (100 + afa)) / 100.0, ROUND(netto_ar * (100 + afa) / 100.0)), " // 8
                                    + "id ")
                            .from("szamlazo_szamla_adatok")
                            .where("azon = " + String.valueOf(s[i][10]))
                            .order("id ASC")
                            .build();
                    Object[][] s2 = App.db.select(query.getQuery());
                    for (int j = 0; j < s2.length; j++) {

                        sor = "\"\";\"" + String.valueOf(s2[j][0]) + "\";\"" + String.valueOf(s2[j][1]) + "\";" + String.valueOf(s2[j][2]).replace(".", ",") + ";\"" + String.valueOf(s2[j][3]) + "\";"
                                + String.valueOf(s2[j][4]).replace(".", ",") + ";" + String.valueOf(s2[j][5]).replace(".", ",") + ";" + String.valueOf(s2[j][6]).replace(".", ",") + ";"
                                + String.valueOf(s2[j][7]).replace(".", ",") + ";" + String.valueOf(s2[j][8]).replace(".", ",");
                        data = sor.getBytes("UTF-8");
                        dos.write(data);
                        dos.writeChars(sep);
                        query = new Query.QueryBuilder()
                                .select("id, "
                                        + "ROUND(osszsuly * 10000.0) / 10000.0, " // 0
                                        + "termekdij, " // 1
                                        + "ROUND(termekdij * ROUND(osszsuly * 10000.0) / 10000.0), " // 2
                                        + "ROUND(ROUND(termekdij * ROUND(osszsuly * 10000.0) / 10000.0) * 0.27), " // 3
                                        + "ROUND(ROUND(termekdij * ROUND(osszsuly * 10000.0) / 10000.0) * 1.27), " // 4
                                        + "csk, " // 5
                                        + "kt ")
                                .from("szamlazo_szamla_termekdij")
                                .where("termekid = " + String.valueOf(s2[j][9]))
                                .build();
                        Object[][] s3 = App.db.select(query.getQuery());
                        if (s3.length != 0) {
                            if (String.valueOf(s[i][11]).equalsIgnoreCase("0"))
                            {
                                sor = "\"\";\"Környezetvédelmi termékdíj (" + (String.valueOf(s3[0][2]).equalsIgnoreCase("64") ? "reklámpapír" : "csomagolószer") + ")\";\"\";" + String.valueOf(s3[0][1]).replace(".", ",") + ";\"kg\";"
                                        + String.valueOf(s3[0][2]).replace(".", ",") + ";" + String.valueOf(s3[0][3]).replace(".", ",") + ";27;"
                                        + String.valueOf(s3[0][4]).replace(".", ",") + ";" + String.valueOf(s3[0][5]).replace(".", ",");
                                data = sor.getBytes("UTF-8");
                            }
                            else
                            {
                                sor = "\"\";\"" + (!String.valueOf(s3[0][6]).isEmpty() ? "CSK: " + String.valueOf(s3[0][6]) : (!String.valueOf(s3[0][7]).isEmpty() ? "KT: " + String.valueOf(s3[0][7]) : ""))
                                        + "\";\"\";" + String.valueOf(s3[0][1]).replace(".", ",") + ";\"kg\";";
                                data = sor.getBytes("UTF-8");
                            }
                            dos.write(data);
                            dos.writeChars(sep);
                        }
                    }

                    dos.writeChars(sep);
                    dos.writeChars(sep);
                }
            }

            fos.close();
            dos.close();
        }
        catch (IOException ex)
        {
            HibaDialog h = new HibaDialog("A csv nem jött létre!\nHiba: IOException.", "Ok", "");
        }
        catch (Exception ex)
        {
            HibaDialog h = new HibaDialog("A csv nem jött létre!\nHiba: Exception.", "Ok", "");
            ex.printStackTrace();
        }
    }
    
    private void kijeloltTermekdijKimutatasKeszitese(File f)
    {
        FileOutputStream fos;
        DataOutputStream dos;
        String sep = "\n";
        byte[] data;
        int[] rows = szamlakTable.getSelectedRows();
        String whereText = "";
        for (int i = 0; i < rows.length; i++)
        {
            whereText += "sza.szamla_sorszam = '" + String.valueOf(szamlakTable.getValueAt(rows[i], 0)) + "' || ";
        }
        whereText += "0";
        Query query = new Query.QueryBuilder()
                .select("sza.szamla_sorszam, " // 0
                        + "(SELECT sz.nev FROM szamlazo_szamla sz WHERE sz.szamla_sorszam = sza.szamla_sorszam), " // 1
                        + "(SELECT sz.teljesites FROM szamlazo_szamla sz WHERE sz.szamla_sorszam = sza.szamla_sorszam), " // 2
                        + "sza.termek, " // 3
                        // Math.round(szelesseg / 1000.0 * magassag / 1000.0 * egysegsuly / 1000.0 * peldany * 1000000.0) / 1000000.0
                        + "IF(td.osszsuly != 0, td.osszsuly, ROUND(td.szelesseg / 1000.0 * td.magassag / 1000.0 * td.egysegsuly / 1000.0 * peldany * 1000000.0) / 1000000.0), " // 4
                        + "'kg', " // 5
                        + "td.termekdij, " // 6
                        + "'Ft/kg'," // 7
                        + "ROUND(td.termekdij * IF(td.osszsuly != 0, td.osszsuly, ROUND(td.szelesseg / 1000.0 * td.magassag / 1000.0 * td.egysegsuly / 1000.0 * peldany * 1000000.0) / 1000000.0)), " // 8
                        + "'Ft', " // 9
                        + "(SELECT IF(sz.atvallal = 1, 'igen', 'nem') FROM szamlazo_szamla sz WHERE sz.szamla_sorszam = sza.szamla_sorszam), " // 10
                        + "td.csk ")
                .from("szamlazo_szamla_adatok sza, szamlazo_szamla_termekdij td ")
                .where("(" + whereText + ") && sza.id = td.termekid")
                .order("sza.id ASC")
                .build();
        Object[][] select = App.db.select(query.getQuery());

        try
        {
            fos = new FileOutputStream(f);
            dos = new DataOutputStream(fos);

            String[] header = {"Számla sorszám", "Vevő", "Teljesítés dátum", "Termék", "Össz.súly", "kg", "Termékdíj", "Ft/kg", "Össz.termékdíj", "Ft", "Átvállalt", "CSK/KT kód"};
            for (int i = 0; i < header.length; i++)
            {
                String fejlec = "\"" + header[i] + "\";";
                data = fejlec.getBytes("UTF-8");
                dos.write(data);
            }
            dos.writeChars(sep);
            for (int i = 0; i < select.length; i++)
            {
                String sor = "\"" + String.valueOf(select[i][0]) + "\";\"" + String.valueOf(select[i][1]) + "\";\"" + String.valueOf(select[i][2]) + "\";\"" + String.valueOf(select[i][3]) + "\";" + String.valueOf(select[i][4]).replace(".", ",") + ";\""
                        + String.valueOf(select[i][5]) + "\";" + String.valueOf(select[i][6]).replace(".", ",") + ";\"" + String.valueOf(select[i][7]) + "\";" + String.valueOf(select[i][8]).replace(".", ",") + ";"
                        + "\"" + String.valueOf(select[i][9]) + "\";\"" + String.valueOf(select[i][10]) + "\";\"" + String.valueOf(select[i][11]) + "\"";
                data = sor.getBytes("UTF-8");
                dos.write(data);
                dos.writeChars(sep);
            }
            fos.close();
            dos.close();
        }
        catch (IOException ex)
        {
            HibaDialog h = new HibaDialog("A csv nem jött létre!\nHiba: IOException.", "Ok", "");
        }
        catch (Exception ex)
        {
            HibaDialog h = new HibaDialog("A csv nem jött létre!\nHiba: Exception.", "Ok", "");
        }
    }

    private boolean checkIfNothingSelected()
    {
        return normal.isSelected()
                || helyesbito.isSelected()
                || helyesbitett.isSelected()
                /*|| kintlevosegCheckBox.isSelected()*/
                || nemNyomtatottCheckBox.isSelected();
    }

    class ScrollAdjustmentListener implements AdjustmentListener
    {
        private JScrollPane pane;

        public ScrollAdjustmentListener(JScrollPane pane)
        {
            this.pane = pane;
        }

        public void adjustmentValueChanged(AdjustmentEvent evt)
        {
            int value = evt.getValue();
            pane.getHorizontalScrollBar().setValue(value);
        }
    }

    class ElonezetThread extends Thread {

        public ElonezetThread() {
            start();
        }

        @Override
        public void run() {
            ElonezetDialog e = new ElonezetDialog(nyomtatasAzon, Integer.parseInt(nyomtatasPeldany.getText()), ElonezetDialog.ELONEZET);
            folyamatbanDialog.setVisible(false);
        }
    }

    class SzamlaAdatokThread extends Thread {

        private int row;

        public SzamlaAdatokThread(int row) {
            this.row = row;
            start();
        }

        @Override
        public void run() {
            SzamlaAdatokDialog sz = new SzamlaAdatokDialog(String.valueOf(szamlakTable.getValueAt(row, 18)));
            folyamatbanDialog.setVisible(false);
        }
    }

    class PdfThread extends Thread {

        private int row;

        public PdfThread(int row) {
            this.row = row;
            start();
        }

        @Override
        public void run() {
            ElonezetDialog e = new ElonezetDialog(String.valueOf(szamlakTable.getValueAt(row, 18)), 1, ElonezetDialog.PDF);
            folyamatbanDialog.setVisible(false);
        }
    }

    class TeljesitesIgazolasNyomtatasThread extends Thread {

        private int row;

        public TeljesitesIgazolasNyomtatasThread(int row) {
            this.row = row;
            start();
        }

        @Override
        public void run()
        {
            String azon = String.valueOf(szamlakTable.getValueAt(row, 18));
            Szamla szla = new Szamla(azon);
            TeljesítesIgazolasDialog teljesítesIgazolasDialog = new TeljesítesIgazolasDialog(szla);

            //folyamatbanDialog.setVisible(false);
        }
    }
}