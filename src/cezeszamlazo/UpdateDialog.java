package cezeszamlazo;

import java.awt.Dimension;
import java.awt.Toolkit;
import java.awt.event.ActionEvent;
import java.awt.event.KeyEvent;
import java.io.IOException;
import javax.swing.AbstractAction;
import javax.swing.ActionMap;
import javax.swing.InputMap;
import javax.swing.JComponent;
import javax.swing.KeyStroke;

public class UpdateDialog extends javax.swing.JDialog
{
    /** A return status code - returned if Cancel button has been pressed */
    public static final int RET_CANCEL = 0;
    /** A return status code - returned if OK button has been pressed */
    public static final int RET_OK = 1;

    public UpdateDialog()
    {
	initComponents();

	Toolkit toolkit = Toolkit.getDefaultToolkit();
	Dimension screenSize = toolkit.getScreenSize();
	int x = (screenSize.width - getWidth()) / 2;
	int y = (screenSize.height - getHeight()) / 2;

	java.net.URL url = ClassLoader.getSystemResource("cezeszamlazo/resources/icon.png");
	java.awt.Image img = toolkit.createImage(url);
	setIconImage(img);

	setLocation(x, y);
	setTitle("Frissítés");

	setModal(true);

	UpdateThread at = new UpdateThread();

	setVisible(true);

	// Close the dialog when Esc is pressed
	String cancelName = "cancel";
	InputMap inputMap = getRootPane().getInputMap(JComponent.WHEN_ANCESTOR_OF_FOCUSED_COMPONENT);
	inputMap.put(KeyStroke.getKeyStroke(KeyEvent.VK_ESCAPE, 0), cancelName);
	
        ActionMap actionMap = getRootPane().getActionMap();
	actionMap.put(cancelName, new AbstractAction() {

	    public void actionPerformed(ActionEvent e) {
		doClose(RET_CANCEL);
	    }
	});
    }

    /** @return the return status of this dialog - one of RET_OK or RET_CANCEL */
    public int getReturnStatus() {
	return returnStatus;
    }

    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jLabel1 = new javax.swing.JLabel();

        setDefaultCloseOperation(javax.swing.WindowConstants.DO_NOTHING_ON_CLOSE);
        setModal(true);
        setName("Form"); // NOI18N
        setUndecorated(true);
        addWindowListener(new java.awt.event.WindowAdapter() {
            public void windowClosing(java.awt.event.WindowEvent evt) {
                closeDialog(evt);
            }
        });

        jLabel1.setName("jLabel1"); // NOI18N

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jLabel1)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jLabel1)
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void closeDialog(java.awt.event.WindowEvent evt) {//GEN-FIRST:event_closeDialog
	doClose(RET_CANCEL);
    }//GEN-LAST:event_closeDialog

    private void doClose(int retStatus)
    {
	returnStatus = retStatus;
	setVisible(false);
	dispose();
    }
    
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JLabel jLabel1;
    // End of variables declaration//GEN-END:variables
    private int returnStatus = RET_CANCEL;

    class UpdateThread extends Thread
    {
	public UpdateThread()
        {
	    start();
	}

	@Override
	public void run()
        {
	    Updater u = new Updater();
	    u.update();
            
            /*while (u.getStatus() < 100)
            {
		setTitle("Frissítés - " + u.getStatus() + "%");
		
                try
                {
		    Thread.sleep(10);
		}
                catch (InterruptedException ex)
                {
		}
	    }*/

	    try
            {
		String keres = "";
                
		if (App.args.length > 0)
                {
		    for (int i = 0; i < App.args.length; i++)
                    {
			keres += " " + App.args[i];
		    }
		}
                
		String cmd = "cmd /c java -jar " + System.getProperty("user.dir") + "\\CezeSzamlazo.jar" + keres;
		cmd = "cmd /c java -jar " + System.getProperty("user.dir") + "\\InvoiceStarter.jar" + keres;
		
                System.out.println(cmd + " (UpdateDialog.java/UpdateThread())");
		Runtime.getRuntime().exec(cmd);
	    }
            catch (IOException ex)
            {
		ex.printStackTrace();
	    }
            
	    App.getApplication().exit();
	    setVisible(false);
	}
    }
}