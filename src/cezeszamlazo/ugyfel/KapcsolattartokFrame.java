/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package cezeszamlazo.ugyfel;

import cezeszamlazo.App;
import cezeszamlazo.HibaDialog;
import cezeszamlazo.controller.Functions;
import cezeszamlazo.database.Query;
import java.awt.Dimension;
import java.awt.Toolkit;
import java.awt.event.MouseEvent;
import java.awt.event.WindowAdapter;
import java.awt.event.WindowEvent;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.Map;

import javax.swing.JTable;
import javax.swing.event.ListSelectionEvent;
import javax.swing.event.ListSelectionListener;
import javax.swing.event.TableModelEvent;
import javax.swing.event.TableModelListener;
import javax.swing.table.DefaultTableModel;
import javax.swing.table.TableColumn;

/**
 *
 * @author Fejlesztés
 */
public class KapcsolattartokFrame extends javax.swing.JFrame {

    /**
     * Creates new form KapcsolattartokFrame
     */
    public KapcsolattartokFrame() {
        initComponents();

        init();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        popupMenu = new javax.swing.JPopupMenu();
        openMenuItem = new javax.swing.JMenuItem();
        csoportositasMenuItem = new javax.swing.JMenuItem();
        jSeparator1 = new javax.swing.JPopupMenu.Separator();
        deleteMenuItem = new javax.swing.JMenuItem();
        keresesText = new javax.swing.JTextField();
        ujButton = new javax.swing.JButton();
        jScrollPane1 = new javax.swing.JScrollPane();
        table = new javax.swing.JTable();
        toggleSelected = new javax.swing.JButton();

        openMenuItem.setIcon(new javax.swing.ImageIcon(getClass().getResource("/cezeszamlazo/resources/images/open_16.png"))); // NOI18N
        openMenuItem.setText("Megnyitás/módosítás");
        openMenuItem.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                openMenuItemActionPerformed(evt);
            }
        });
        popupMenu.add(openMenuItem);

        csoportositasMenuItem.setIcon(new javax.swing.ImageIcon(getClass().getResource("/cezeszamlazo/resources/images/osszevonas_16.png"))); // NOI18N
        csoportositasMenuItem.setText("Kijelöltek csoportosítása");
        csoportositasMenuItem.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                csoportositasMenuItemActionPerformed(evt);
            }
        });
        popupMenu.add(csoportositasMenuItem);
        popupMenu.add(jSeparator1);

        deleteMenuItem.setIcon(new javax.swing.ImageIcon(getClass().getResource("/cezeszamlazo/resources/images/delete_16.png"))); // NOI18N
        deleteMenuItem.setText("Törlés");
        deleteMenuItem.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                deleteMenuItemActionPerformed(evt);
            }
        });
        popupMenu.add(deleteMenuItem);

        keresesText.setFont(new java.awt.Font("Tahoma", 0, 12)); // NOI18N
        keresesText.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyReleased(java.awt.event.KeyEvent evt) {
                keresesTextKeyReleased(evt);
            }
        });

        ujButton.setFont(new java.awt.Font("Tahoma", 0, 12)); // NOI18N
        ujButton.setText("Új kapcsolattartó");
        ujButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                ujButtonActionPerformed(evt);
            }
        });

        table.setFont(new java.awt.Font("Tahoma", 0, 12)); // NOI18N
        table.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "id", "ugyfel", "nev", "telefon", "email", "Pénzügyes", "kiválaszt"
            }
        ) {
            Class[] types = new Class [] {
                java.lang.Object.class, java.lang.Object.class, java.lang.Object.class, java.lang.Object.class, java.lang.Object.class, java.lang.Boolean.class, java.lang.Boolean.class
            };
            boolean[] canEdit = new boolean [] {
                false, false, false, false, false, true, true
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        table.setRowHeight(25);
        table.getTableHeader().setReorderingAllowed(false);
        table.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                tableMouseClicked(evt);
            }
            public void mouseReleased(java.awt.event.MouseEvent evt) {
                tableMouseReleased(evt);
            }
        });
        jScrollPane1.setViewportView(table);

        toggleSelected.setText("Kiválasztottak");
        toggleSelected.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                toggleSelectedActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jScrollPane1)
                        .addContainerGap())
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(keresesText, javax.swing.GroupLayout.PREFERRED_SIZE, 524, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(18, 18, 18)
                        .addComponent(ujButton)
                        .addGap(18, 18, 18)
                        .addComponent(toggleSelected)
                        .addGap(0, 11, Short.MAX_VALUE))))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(keresesText, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(ujButton)
                    .addComponent(toggleSelected))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 290, Short.MAX_VALUE)
                .addContainerGap())
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private String generateRegex() {
        String regex = "";

        regex += "^(";
//    	for(int i=0; i<selected.length; i++){
//    		regex += String.valueOf(table.getValueAt(selected[i], 0)) + "|";
//    	}

        for (int i = 0; i < table.getRowCount(); i++) {
            if ((boolean) table.getValueAt(i, 6)) {
                regex += String.valueOf(table.getValueAt(i, 0)) + "|";
            }
        }

        regex = regex.substring(0, regex.length() - 1);
        regex += ")$";

        if (regex.equals("^)$")) {
            return "^(Nothing matches to this pattern)$";
        }

        return regex;
    }

    private Map<Integer, String> produceData() {
        Map<Integer, String> data = new HashMap<Integer, String>();

        for (int i = 0; i < table.getRowCount(); i++) {
            data.put(Integer.parseInt(String.valueOf(table.getValueAt(i, 0))), String.valueOf(table.getValueAt(i, 1)));
        }

        return data;
    }


    private void keresesTextKeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_keresesTextKeyReleased
        frissites();
    }//GEN-LAST:event_keresesTextKeyReleased

    private void ujButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_ujButtonActionPerformed
        UjKapcsolattartoDialog ukd = new UjKapcsolattartoDialog();
        if (ukd.getReturnStatus() == UjKapcsolattartoDialog.RET_OK) {
            frissites();
        }
    }//GEN-LAST:event_ujButtonActionPerformed

    private void tableMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_tableMouseClicked
        int row = table.getSelectedRow();
        if (row >= 0 && evt.getButton() == MouseEvent.BUTTON1 && evt.getClickCount() == 2) {
            megnyitas(row);
        }
    }//GEN-LAST:event_tableMouseClicked

    private void tableMouseReleased(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_tableMouseReleased
        if (evt.isPopupTrigger()) {
            JTable source = (JTable) evt.getSource();
            int row = source.rowAtPoint(evt.getPoint());
            int column = source.columnAtPoint(evt.getPoint());

            if (!source.isRowSelected(row)) {
                source.changeSelection(row, column, false, false);
            }

            boolean tobbSor = (source.getSelectedRows().length > 1);

            openMenuItem.setEnabled(!tobbSor);
            deleteMenuItem.setEnabled(!tobbSor);

            csoportositasMenuItem.setEnabled(tobbSor);

            popupMenu.show(evt.getComponent(), evt.getX(), evt.getY());
        }
    }//GEN-LAST:event_tableMouseReleased

    private void openMenuItemActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_openMenuItemActionPerformed
        int row = table.getSelectedRow();
        if (row >= 0) {
            megnyitas(row);
        }
    }//GEN-LAST:event_openMenuItemActionPerformed

    private void deleteMenuItemActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_deleteMenuItemActionPerformed
        HibaDialog h = new HibaDialog("Biztosan törlöd a kapcsolattartót?", "Igen", "Nem");
        if (h.getReturnStatus() == HibaDialog.RET_OK) {
            int row = table.getSelectedRow();
            Kapcsolattarto kapcsolattarto = new Kapcsolattarto(Integer.parseInt(String.valueOf(table.getValueAt(row, 0))));
            kapcsolattarto.torles();
            frissites();
        }
    }//GEN-LAST:event_deleteMenuItemActionPerformed

    private void csoportositasMenuItemActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_csoportositasMenuItemActionPerformed
        int[] rows = table.getSelectedRows();
        int[] ids = new int[rows.length];
        for (int i = 0; i < rows.length; i++) {
            ids[i] = Integer.parseInt(String.valueOf(table.getValueAt(rows[i], 0)));
        }
        KapcsolattartoCsoportositasDialog ucsd = new KapcsolattartoCsoportositasDialog(ids);
        if (ucsd.getReturnStatus() == KapcsolattartoCsoportositasDialog.RET_OK) {
            frissites();
        }
    }//GEN-LAST:event_csoportositasMenuItemActionPerformed

    private void toggleSelectedActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_toggleSelectedActionPerformed
        if (kijeloltUgyfelekFrame == null) {
            kijeloltUgyfelekFrame = new KijeloltUgyfelekFrame<KapcsolattartokFrame>((int) (this.getLocation().getX() + this.getSize().getWidth()), (int) (this.getLocation().getY()), this);
            kijeloltUgyfelekFrame.setTitle("Kiválasztott Kapcsolattartók");
            kijeloltUgyfelekFrame.fillUp(produceData());
        }

        if (kijeloltUgyfelekFrame.isVisible()) {
            kijeloltUgyfelekFrame.setVisible(false);
        } else {
            kijeloltUgyfelekFrame.sortTable(generateRegex());
            kijeloltUgyfelekFrame.nyit();
        }
    }//GEN-LAST:event_toggleSelectedActionPerformed


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JMenuItem csoportositasMenuItem;
    private javax.swing.JMenuItem deleteMenuItem;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JPopupMenu.Separator jSeparator1;
    private javax.swing.JTextField keresesText;
    private javax.swing.JMenuItem openMenuItem;
    private javax.swing.JPopupMenu popupMenu;
    private javax.swing.JTable table;
    private javax.swing.JButton toggleSelected;
    private javax.swing.JButton ujButton;
    // End of variables declaration//GEN-END:variables

//    private javax.swing.JButton toggleSelected;
    private KijeloltUgyfelekFrame<KapcsolattartokFrame> kijeloltUgyfelekFrame;

    public void init() {

//        deleteMenuItem.setVisible(PixiRendszer.user.getJogosultsag() != 0);
        Toolkit toolkit = Toolkit.getDefaultToolkit();
        Dimension screenSize = toolkit.getScreenSize();
        int x = (screenSize.width - getWidth()) / 2;
        int y = (screenSize.height - getHeight()) / 2;

//        setIconImage(PixiRendszer.img);
        setLocation(x, y);
        setTitle("Kapcsolattartók");
        
        String w = "1";
        DefaultTableModel model = (DefaultTableModel) table.getModel();
        String[] header = {"Id", "Ügyfél", "Név", "Telefon", "Email", "Pénzügyes", "Kiválaszt"};

        Query query = new Query.QueryBuilder()
                .select("k.id, uf.nev, k.nev, k.telefon, k.email, k.hirlevel, k.penzugyes")
                .from("pixi_kapcsolattarto k, pixi_ugyfel uf ")
                .where(" k.ugyfelid = uf.id && " + w + " ")
                .order("k.nev ASC")
                .build();
        Object[][] vector1 = App.db.select(query.getQuery());

        Object[][] vector2 = new Object[vector1.length][vector1[0].length + 1];

        for (int i = 0; i < vector1.length; i++) {

            for (int j = 0; j < vector1[0].length; j++) {
                vector2[i][j] = vector1[i][j];

            }
            int isSelected = Functions.getIntFromObject(vector2[i][5]);
            if (isSelected == 1) {
                vector2[i][5] = true;
            } else {
                vector2[i][5] = false;
            }

            vector2[i][vector1[0].length - 1] = false;

        }

        model.setDataVector(vector2, header);

        DefaultTableRender render = new DefaultTableRender();
        TableColumn col;
        CheckBoxRenderer checkBoxRenderer = new CheckBoxRenderer();
        int[] meret = {30, 200, 150, 100, 100};
        for (int i = 0; i < meret.length; i++) {
            col = table.getColumnModel().getColumn(i);
            col.setPreferredWidth(meret[i]);
            col.setCellRenderer(render);
        }
        col = table.getColumnModel().getColumn(5);
        col.setCellRenderer(checkBoxRenderer);

        model.addTableModelListener(new CheckBoxModelListener(this));
    }

    public void frissites() {
        String w = "1";
        String k = keresesText.getText();
        if (!k.isEmpty()) {
            w += " && (k.nev LIKE '%" + k + "%' || uf.nev LIKE '%" + k + "%' || k.telefon LIKE '%" + k + "%' || k.email LIKE '%" + k + "%' || k.id = '" + k + "')";
        }
//        if (PixiRendszer.user.getJogosultsag() == PixiUser.USER) {
//            w += " && uf.userid = " + PixiRendszer.user.getId();
//        }
        DefaultTableModel model = (DefaultTableModel) table.getModel();
        String[] header = {"Id", "Ügyfél", "Név", "Telefon", "Email", "Pénzügyes", "Kiválaszt"};

        Query query = new Query.QueryBuilder()
                .select("k.id, uf.nev, k.nev, k.telefon, k.email, k.hirlevel, k.penzugyes")
                .from("pixi_kapcsolattarto k, pixi_ugyfel uf ")
                .where(" k.ugyfelid = uf.id && " + w + " ")
                .order("k.nev ASC")
                .build();
        Object[][] vector1 = App.db.select(query.getQuery());

        Object[][] vector2 = new Object[vector1.length][vector1[0].length + 1];

        for (int i = 0; i < vector1.length; i++) {

            for (int j = 0; j < vector1[0].length; j++) {
                vector2[i][j] = vector1[i][j];
            }
            int isSelected = Functions.getIntFromObject(vector2[i][6]);
           
           
            if (isSelected == 1) {
                vector2[i][5] = true;
            } else {
                vector2[i][5] = false;
            }

            vector2[i][vector1[0].length - 1] = false;

        }

        model.setDataVector(vector2, header);

        DefaultTableRender render = new DefaultTableRender();
        TableColumn col;
        CheckBoxRenderer checkBoxRenderer = new CheckBoxRenderer();
        int[] meret = {30, 200, 150, 100, 100};
        for (int i = 0; i < meret.length; i++) {
            col = table.getColumnModel().getColumn(i);
            col.setPreferredWidth(meret[i]);
            col.setCellRenderer(render);

//            col.setCellRenderer(render);
        }
        col = table.getColumnModel().getColumn(5);
        col.setCellRenderer(checkBoxRenderer);

        if (kijeloltUgyfelekFrame != null) {
            kijeloltUgyfelekFrame.fillUp(produceData());
            kijeloltUgyfelekFrame.sortTable(generateRegex());
        }
    }

    public void setSelected(ArrayList<Integer> ids) {
        table.clearSelection();
        for (int i = 0; i < table.getRowCount(); i++) {
            if (ids.contains(Integer.valueOf(String.valueOf(table.getValueAt(i, 0))))) {
//    		if (ids.contains(table.getValueAt(i, 0))){
                table.addRowSelectionInterval(i, i);
            }
        }
    }

    private void megnyitas(int row) {
        UjKapcsolattartoDialog ukd = new UjKapcsolattartoDialog(Integer.parseInt(String.valueOf(table.getValueAt(row, 0))));
        if (ukd.getReturnStatus() == UjKapcsolattartoDialog.RET_OK) {
            frissites();
        }
    }

    public void nyit() {
        frissites();
        setVisible(true);
    }

}
