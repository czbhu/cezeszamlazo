package cezeszamlazo.views;

import cezeszamlazo.App;
import cezeszamlazo.controller.InvoiceSketchesController;
import cezeszamlazo.model.PopupTimer;
import invoice.Invoice;
import java.awt.Component;
import java.awt.Dimension;
import java.awt.Point;
import java.awt.Toolkit;
import java.awt.event.MouseEvent;
import java.util.ArrayList;
import javax.swing.JLabel;
import javax.swing.JTable;
import javax.swing.table.DefaultTableModel;
import javax.swing.table.TableCellRenderer;
import javax.swing.table.TableColumn;

/**
 * @author Tomy
 */
public class InvoiceSketchesView extends javax.swing.JFrame
{
    private InvoiceSketchesController controller = new InvoiceSketchesController();
    private ArrayList<String> productTooltips = new ArrayList<>();
    
    private PopupTimer popupTimer;
    
    public InvoiceSketchesView()
    {
        initComponents();
        Init();
    }

    private void Init()
    {
        Toolkit toolkit = Toolkit.getDefaultToolkit();
        Dimension screenSize = toolkit.getScreenSize();
        int x = (screenSize.width - getWidth()) / 2;
        int y = (screenSize.height - getHeight()) / 2;
        
        setLocation(x, y);
        setTitle("Számla vázlatok");
    }
    
    private void UpdateTableSketches()
    {
        DefaultTableModel DTModel = (DefaultTableModel) table_Sketches.getModel();
        
        String [] header = {"Id", "Sorszám", "Azonosító", "Eladó", "Vevő", "Fizetési mód", "Nettó", "Áfa érték", "Bruttó", "Valuta", "Középárfolyam", "Termékek"};
        Object [][] sketches = controller.getSketches();
        Object [][] values = new Object[sketches.length][12];
        
        for(int i = 0; i < sketches.length; i++)
        {
            values[i][0] = sketches[i][0];
            values[i][1] = sketches[i][2];
            values[i][2] = sketches[i][1];
            values[i][3] = sketches[i][4];
            values[i][4] = sketches[i][5];
            values[i][5] = sketches[i][18];
            values[i][6] = sketches[i][23];
            values[i][7] = sketches[i][24];
            values[i][8] = Double.parseDouble(sketches[i][23].toString()) + Double.parseDouble(sketches[i][24].toString());
            values[i][9] = sketches[i][20];
            values[i][10] = sketches[i][21];
            productTooltips.add(sketches[i][21].toString());
            
            Object [][] products = controller.getProducts(sketches[i][1].toString());
            String productsStr = "";
            
            for(int j = 0; j < products.length; j++)
            {
                productsStr += products[j][3].toString() + ", ";
            }
            
            if(productsStr.length() > 2)
            {
                productsStr = productsStr.substring(0, productsStr.length()-2);
                values[i][11] = productsStr;
            }
        }
        
        DTModel.setDataVector(values, header);
    }
    
    public void Open()
    {
        UpdateTableSketches();
        setVisible(true);
    }
    
    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        popupMenu_Sketches = new javax.swing.JPopupMenu();
        menuItem_CreateInvoices = new javax.swing.JMenuItem();
        menuItem_ModifyInvoice = new javax.swing.JMenuItem();
        menuItem_DeleteInvoices = new javax.swing.JMenuItem();
        scrollPane_Sketches = new javax.swing.JScrollPane();
        table_Sketches = new javax.swing.JTable();
        textField_Search = new javax.swing.JTextField();

        popupMenu_Sketches.setName("popupMenu_Sketches"); // NOI18N

        org.jdesktop.application.ResourceMap resourceMap = org.jdesktop.application.Application.getInstance(cezeszamlazo.App.class).getContext().getResourceMap(InvoiceSketchesView.class);
        menuItem_CreateInvoices.setText(resourceMap.getString("menuItem_CreateInvoices.text")); // NOI18N
        menuItem_CreateInvoices.setName("menuItem_CreateInvoices"); // NOI18N
        menuItem_CreateInvoices.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                menuItem_CreateInvoicesActionPerformed(evt);
            }
        });
        popupMenu_Sketches.add(menuItem_CreateInvoices);

        menuItem_ModifyInvoice.setText(resourceMap.getString("menuItem_ModifyInvoice.text")); // NOI18N
        menuItem_ModifyInvoice.setName("menuItem_ModifyInvoice"); // NOI18N
        menuItem_ModifyInvoice.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                menuItem_ModifyInvoiceActionPerformed(evt);
            }
        });
        popupMenu_Sketches.add(menuItem_ModifyInvoice);

        menuItem_DeleteInvoices.setText(resourceMap.getString("menuItem_DeleteInvoices.text")); // NOI18N
        menuItem_DeleteInvoices.setName("menuItem_DeleteInvoices"); // NOI18N
        menuItem_DeleteInvoices.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                menuItem_DeleteInvoicesActionPerformed(evt);
            }
        });
        popupMenu_Sketches.add(menuItem_DeleteInvoices);

        setName("Form"); // NOI18N

        scrollPane_Sketches.setName("scrollPane_Sketches"); // NOI18N

        table_Sketches.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "Id", "Sorszám", "Azonosító", "Eladó neve", "Vevő neve", "Fizetési mód", "Nettó", "Áfa érték", "Bruttó", "Valuta", "Középárfolyam", "Termékek"
            }
        ) {
            boolean[] canEdit = new boolean [] {
                false, false, false, false, false, false, false, false, false, false, false, false
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        table_Sketches.setAutoResizeMode(javax.swing.JTable.AUTO_RESIZE_OFF);
        table_Sketches.setName("table_Sketches"); // NOI18N
        table_Sketches.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                table_SketchesMouseClicked(evt);
            }
            public void mouseEntered(java.awt.event.MouseEvent evt) {
                table_SketchesMouseEntered(evt);
            }
            public void mousePressed(java.awt.event.MouseEvent evt) {
                table_SketchesMousePressed(evt);
            }
            public void mouseReleased(java.awt.event.MouseEvent evt) {
                table_SketchesMouseReleased(evt);
            }
        });
        scrollPane_Sketches.setViewportView(table_Sketches);

        textField_Search.setText(resourceMap.getString("textField_Search.text")); // NOI18N
        textField_Search.setName("textField_Search"); // NOI18N

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(textField_Search, javax.swing.GroupLayout.PREFERRED_SIZE, 182, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(0, 0, Short.MAX_VALUE))
                    .addComponent(scrollPane_Sketches, javax.swing.GroupLayout.DEFAULT_SIZE, 819, Short.MAX_VALUE))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(textField_Search, javax.swing.GroupLayout.PREFERRED_SIZE, 32, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(scrollPane_Sketches, javax.swing.GroupLayout.PREFERRED_SIZE, 332, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void ShowPopupMenu(MouseEvent evt)
    {
        JTable source = (JTable) evt.getSource();
        int row = source.rowAtPoint(evt.getPoint());
        int column = source.columnAtPoint(evt.getPoint());

        if (!source.isRowSelected(row))
        {
            source.changeSelection(row, column, false, false);
        }

        int[] rows = source.getSelectedRows();
        Component[] comps = popupMenu_Sketches.getComponents();
        if (rows.length > 1)
        {
            for (Component c : comps)
            {
                c.setVisible(true);
            }
            menuItem_ModifyInvoice.setVisible(false);
        }
        else if(rows.length == 1)
        {
            for (Component c : comps)
            {
                c.setVisible(true);
            }
        }
        else
        {
            for (Component c : comps)
            {
                c.setVisible(false);
            }
        }

        popupMenu_Sketches.show(evt.getComponent(), evt.getX(), evt.getY());
    }
    
    private void table_SketchesMouseReleased(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_table_SketchesMouseReleased
        if (evt.isPopupTrigger())
        {
            ShowPopupMenu(evt);
        }
        else
        {
            if(popupTimer.Stop())
            {
                ShowPopupMenu(evt);
                popupTimer.setStart(0);
            }
        }
    }//GEN-LAST:event_table_SketchesMouseReleased

    private void menuItem_CreateInvoicesActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_menuItem_CreateInvoicesActionPerformed
        int [] rows = table_Sketches.getSelectedRows();
        
        for(int i = 0; i < rows.length; i++)
        {
            String indentifier = table_Sketches.getValueAt(rows[i], 2).toString();
            Invoice invoice = new Invoice(Invoice.SKETCH, Invoice.InvoiceType.STORNO, "szamlazo_sketches", indentifier);
            
            /*GLSView view = new GLSView(invoice.getInvoiceNumber());
            
            if(view.getReturnStatus() == GLSView.RET_OK)
            {
                invoice.PrintGLSLabel();
            }*/
            
            invoice.Save(App.user.getId());
            invoice.setType(Invoice.SKETCH);
            invoice.setInvoiceType(Invoice.InvoiceType.STORNO);
            invoice.Delete(indentifier);
        }
        
        UpdateTableSketches();
    }//GEN-LAST:event_menuItem_CreateInvoicesActionPerformed

    private void menuItem_ModifyInvoiceActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_menuItem_ModifyInvoiceActionPerformed
        int row = table_Sketches.getSelectedRow();
        
        String indentifier = table_Sketches.getValueAt(row, 2).toString();
        Invoice invoice = new Invoice(Invoice.SKETCH, Invoice.InvoiceType.MODIFICATION, "szamlazo_sketches", indentifier);
        
        //InvoiceView view = new InvoiceView(invoice);
        ResizeableInvoiceView view = new ResizeableInvoiceView(invoice);
        
        if(view.getReturnStatus() == ResizeableInvoiceView.RET_OK)
        {
            invoice = view.getInvoice();

            if(invoice.getType() == Invoice.INVOICE && invoice.getInvoiceType() == Invoice.InvoiceType.NEW)
            {
                invoice = new Invoice(Invoice.SKETCH, Invoice.InvoiceType.MODIFICATION, "szamlazo_sketches", indentifier);
                invoice.Delete(indentifier);
            }
        }
        
        UpdateTableSketches();
    }//GEN-LAST:event_menuItem_ModifyInvoiceActionPerformed

    private void menuItem_DeleteInvoicesActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_menuItem_DeleteInvoicesActionPerformed
        int row = table_Sketches.getSelectedRow();
        
        String indentifier = table_Sketches.getValueAt(row, 2).toString();
        Invoice invoice = new Invoice(Invoice.SKETCH, Invoice.InvoiceType.NEW, "szamlazo_sketches", indentifier);
        invoice.Delete(indentifier);
        
        UpdateTableSketches();
    }//GEN-LAST:event_menuItem_DeleteInvoicesActionPerformed

    private void table_SketchesMouseEntered(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_table_SketchesMouseEntered
        Point point = evt.getPoint();
        
        int column = table_Sketches.columnAtPoint(point);
        
        if(column == 11)
        {
            TableColumn col = table_Sketches.getColumnModel().getColumn(column);
            col.setCellRenderer(new TableCellTooltip());
        }
    }//GEN-LAST:event_table_SketchesMouseEntered

    private void table_SketchesMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_table_SketchesMouseClicked
        if(evt.getButton() == MouseEvent.BUTTON1 && evt.getClickCount() == 2)
        {
            int row = table_Sketches.getSelectedRow();

            String indentifier = table_Sketches.getValueAt(row, 2).toString();
            Invoice invoice = new Invoice(Invoice.SKETCH, Invoice.InvoiceType.MODIFICATION, "szamlazo_sketches", indentifier);

            //InvoiceView view = new InvoiceView(invoice);
            ResizeableInvoiceView view = new ResizeableInvoiceView(invoice);

            UpdateTableSketches();
        }
    }//GEN-LAST:event_table_SketchesMouseClicked

    private void table_SketchesMousePressed(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_table_SketchesMousePressed
        popupTimer = new PopupTimer();
        popupTimer.Start();
    }//GEN-LAST:event_table_SketchesMousePressed

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JMenuItem menuItem_CreateInvoices;
    private javax.swing.JMenuItem menuItem_DeleteInvoices;
    private javax.swing.JMenuItem menuItem_ModifyInvoice;
    private javax.swing.JPopupMenu popupMenu_Sketches;
    private javax.swing.JScrollPane scrollPane_Sketches;
    private javax.swing.JTable table_Sketches;
    private javax.swing.JTextField textField_Search;
    // End of variables declaration//GEN-END:variables

    class TableCellTooltip extends JLabel implements TableCellRenderer
    {
        @Override
        public Component getTableCellRendererComponent(JTable table, Object value, boolean isSelected, boolean hasFocus, int row, int column)
        {
            setToolTipText(value.toString());
            setText(value.toString());
            
            return this;
        }
    }
}